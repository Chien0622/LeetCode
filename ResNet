{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"ResNet.ipynb","version":"0.3.2","provenance":[{"file_id":"1VL1sK4Hz_IsuhkyQRc8h2SD3w90OF1yp","timestamp":1526642217104}],"collapsed_sections":[]},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.7"},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"colab_type":"code","id":"gX3SX-Y5Kh1A","colab":{}},"source":["# !rm *\n","# !wget http://140.114.28.196/file/train.zip \n","# !wget http://140.114.28.196/file/val.zip \n","# !wget http://140.114.28.196/file/train.txt\n","# !unzip -q train.zip\n","# !unzip -q -f val.zip\n","\n","# !ls"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"AarV9q8bMV8o","colab_type":"code","outputId":"03486278-d10c-427c-c014-11c53900ca38","executionInfo":{"status":"ok","timestamp":1564498102250,"user_tz":-480,"elapsed":47532,"user":{"displayName":"徐伃萱","photoUrl":"","userId":"07249205515745393960"}},"colab":{"base_uri":"https://localhost:8080/","height":1000,"output_embedded_package_id":"1nUgrIceTBAt2rsd10I3tudubq_klCgXN"}},"source":["from google.colab import drive\n","drive.mount('/content/drive')\n","!cp /content/drive/My\\ Drive/images.zip ./\n","!unzip images.zip"],"execution_count":0,"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}]},{"cell_type":"code","metadata":{"colab_type":"code","executionInfo":{"status":"ok","timestamp":1564498105471,"user_tz":-480,"elapsed":50741,"user":{"displayName":"徐伃萱","photoUrl":"","userId":"07249205515745393960"}},"id":"Hr6uu3lMzh0M","outputId":"9ed9a234-2c63-4348-9c46-a1c0a2c569fc","colab":{"base_uri":"https://localhost:8080/","height":54}},"source":["import tensorflow as tf\n","import numpy as np\n","import os, pdb\n","import cv2\n","import numpy as np\n","import random as rn\n","import tensorflow as tf\n","import threading\n","import time\n","\n","global n_classes, layer_count \n","n_classes = 100\n","layer_count = 0\n","\n","'''\n","LOG_DIR = '/tmp/log2'\n","get_ipython().system_raw(\n","    'tensorboard --logdir {} --host 0.0.0.0 --port 6006 &'\n","    .format(LOG_DIR)\n",")\n","\n","#======================Only needed in colab===================================\n","!wget https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip\n","!unzip -o ngrok-stable-linux-amd64.zip\n","get_ipython().system_raw('./ngrok http 6006 &')\n","!curl -s http://localhost:4040/api/tunnels | python3 -c \\\n","    \"import sys, json; print(json.load(sys.stdin)['tunnels'][0]['public_url'])\"\n","#======================Only needed in colab===================================\n","'''"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'\\nLOG_DIR = \\'/tmp/log2\\'\\nget_ipython().system_raw(\\n    \\'tensorboard --logdir {} --host 0.0.0.0 --port 6006 &\\'\\n    .format(LOG_DIR)\\n)\\n\\n#======================Only needed in colab===================================\\n!wget https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip\\n!unzip -o ngrok-stable-linux-amd64.zip\\nget_ipython().system_raw(\\'./ngrok http 6006 &\\')\\n!curl -s http://localhost:4040/api/tunnels | python3 -c     \"import sys, json; print(json.load(sys.stdin)[\\'tunnels\\'][0][\\'public_url\\'])\"\\n#======================Only needed in colab===================================\\n'"]},"metadata":{"tags":[]},"execution_count":3}]},{"cell_type":"code","metadata":{"colab_type":"code","id":"tCNUC9U1zh0U","colab":{}},"source":["#==========================================================================\n","#=============Reading data in multithreading manner========================\n","#==========================================================================\n","def read_labeled_image_list(image_list_file, training_img_dir):\n","    \"\"\"Reads a .txt file containing pathes and labeles\n","    Args:\n","       image_list_file: a .txt file with one /path/to/image per line\n","       label: optionally, if set label will be pasted after each line\n","    Returns:\n","       List with all filenames in file image_list_file\n","    \"\"\"\n","    f = open(image_list_file, 'r')\n","    filenames = []\n","    labels = []\n","\n","    for line in f:\n","        filename, label = line[:-1].split(' ')\n","        filename = training_img_dir+filename\n","        filenames.append(filename)\n","        labels.append(int(label))\n","        \n","    return filenames, labels\n","    \n","    \n","def read_images_from_disk(input_queue, size1=256):\n","    \"\"\"Consumes a single filename and label as a ' '-delimited string.\n","    Args:\n","      filename_and_label_tensor: A scalar string tensor.\n","    Returns:\n","      Two tensors: the decoded image, and the string label.\n","    \"\"\"\n","    label = input_queue[1]\n","    fn=input_queue[0]\n","    file_contents = tf.read_file(input_queue[0])\n","    example = tf.image.decode_jpeg(file_contents, channels=3)\n","    \n","    #example = tf.image.decode_png(file_contents, channels=3, name=\"dataset_image\") # png fo rlfw\n","    example=tf.image.resize_images(example, [size1,size1])\n","    return example, label, fn\n","\n","def setup_inputs(sess, filenames, training_img_dir, image_size=256, crop_size=224, isTest=False, batch_size=64):\n","    \n","    # Read each image file\n","    image_list, label_list = read_labeled_image_list(filenames, training_img_dir)\n","\n","    images = tf.cast(image_list, tf.string)\n","    labels = tf.cast(label_list, tf.int64)\n","     # Makes an input queue\n","    if isTest is False:\n","        isShuffle = True\n","        numThr = 4\n","    else:\n","        isShuffle = False\n","        numThr = 1\n","        \n","    input_queue = tf.train.slice_input_producer([images, labels], shuffle=isShuffle)\n","    image, y,fn = read_images_from_disk(input_queue)\n","\n","    channels = 3\n","    image.set_shape([None, None, channels])\n","        \n","    # Crop and other random augmentations\n","    if isTest is False:\n","        image = tf.image.random_flip_left_right(image)\n","        image = tf.image.random_flip_up_down(image)\n","        image = tf.image.random_hue(image,0.05)\n","        image = tf.image.random_saturation(image, .95, 1.05)\n","        image = tf.image.random_brightness(image, .05)\n","        image = tf.image.random_contrast(image, .95, 1.05)\n","    \n","        \n","\n","    image = tf.random_crop(image, [crop_size, crop_size, 3])\n","    image = tf.cast(image, tf.float32)/255.0\n","    \n","    image, y,fn = tf.train.batch([image, y, fn], batch_size=batch_size, capacity=batch_size*3, num_threads=numThr, name='labels_and_images')\n","\n","    tf.train.start_queue_runners(sess=sess)\n","\n","    return image, y, fn, len(label_list)\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"colab_type":"code","id":"zyjBt-MqVce6","colab":{}},"source":["def initializer(in_filters, out_filters,name='wb', ks=3):\n","    W = tf.get_variable(name+\"W\", [3,3, in_filters,out_filters], initializer=tf.truncated_normal_initializer())\n","    b = tf.get_variable(name+\"B\", [out_filters], initializer=tf.truncated_normal_initializer())\n","    return W, b\n","\n","def activation(x,name=\"activation\"):\n","    return tf.nn.relu(x, name=name)\n","    \n","def conv2d(name, l_input, w, b, s, p):\n","    l_input = tf.nn.conv2d(l_input, w, strides=[1,s,s,1], padding=p, name=name)\n","    l_input = l_input+b\n","\n","    return l_input\n","\n","def max_pool(name, l_input, k, s):\n","    return tf.nn.max_pool(l_input, ksize=[1, k, k, 1], strides=[1, s, s, 1], padding='VALID', name=name)\n","\n","def batchnorm(conv, isTraining, name='bn'):\n","    return tf.layers.batch_normalization(conv, momentum = 0.997, training=isTraining, name=\"bn\"+name)\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"colab_type":"code","id":"94VSiHqhzh0S","colab":{}},"source":["\n","  \n","def residual_block(in_x, in_filters, out_filters, stride, tst, name):\n","    # first convolution layer\n","    global layer_count\n","  \n","    w1, b1 = initializer(in_filters, in_filters, name=name+'wb1')\n","    \n","    x = conv2d(name+'r1', in_x, w1, b1, stride, \"SAME\")\n","    x = activation(x)   \n","    layer_count+=1\n","    print(\"Layer [%d] \" % (layer_count) , x.get_shape().as_list())\n","    \n","    # second convolution layer\n","    w2, b2 = initializer(in_filters, out_filters, name=name+'wb2')\n","    \n","    x = conv2d(name+'r2', x, w2, b2, stride, \"SAME\")\n","    x = batchnorm(x, tst, name=name+\"bn1-2\")\n","    x = activation(x)\n","    layer_count+=1\n","    print(\"Layer [%d] \" % (layer_count) , x.get_shape().as_list())\n","    \n","    if in_filters != out_filters:\n","#         w3, b3 = initializer(in_filters, out_filters, name=name+'trans', ks=1)\n","#         identity = conv2d(name+'r3', in_x, w3, b3, 1, \"SAME\")\n","#         layer_count+=1\n","        print(\"Layer [%d] \" % (layer_count) , identity.get_shape().as_list())\n","        difference = out_filters - in_filters\n","        left_pad = difference // 2\n","        right_pad = difference - left_pad\n","        identity = tf.pad(in_x, [[0, 0], [0, 0], [0, 0], [left_pad, right_pad]])\n","        return identity + x \n","    else:\n","        return in_x + x\n","\n","      \n","def ResNet(_X, tst):\n","    global n_classes\n","    w1 = tf.get_variable(\"firstW\", [7,7,3, 64], initializer=tf.truncated_normal_initializer())\n","    b1 = tf.get_variable(\"firstB\", [64], initializer=tf.truncated_normal_initializer())\n","    \n","    x = conv2d('conv1', _X, w1, b1, 3, \"VALID\")\n","    x = batchnorm(x, tst, name='sbn')\n","    x= tf.nn.relu(x)\n","    \n","    filters_num = [64,128,256,512]\n","    block_num = [3,4,6,3]\n","    strides=[1,1,1,1]\n","    l_cnt = 1\n","    for i in range(len(filters_num)):\n","      for j in range(block_num[i]):\n","          x = residual_block(x, filters_num[i], filters_num[i], strides[i], tst, 'RB%d_%d'%(i,j))\n","          print('[L-%d] Build %dth residual block %d with %d channels' % (l_cnt,i, j, filters_num[i]))\n","          l_cnt +=1\n","          if ((j==block_num[i]-1) & (i<len(filters_num)-1)):\n","            x = batchnorm(x, tst, name='RB_bn%d_%d'%(i,j))\n","            w1, b1 = initializer(filters_num[i], filters_num[i+1], name='RB_pool%d_%d'%(i,j))\n","            x = conv2d('RB_pool%d_%d'%(i,j), x, w1, b1, 2, \"VALID\")\n","            x = activation(x)\n","            print('[L-%d] Build %dth connection layer %d from %d to %d channels' % (l_cnt, i, j, filters_num[i], filters_num[i+1]))\n","            l_cnt +=1\n","\n","    wo, bo=initializer(filters_num[-1], n_classes, name='final_wb')\n","    x = conv2d('final', x, wo, bo, 1, \"SAME\")\n","    x = batchnorm(x, tst, name=\"final_bn1\")\n","    x = activation(x, name='final_act')\n","    \n","    x = tf.reduce_mean(x, [1,2]) #b x7 x 7 x 50 ==> b x 1 x 1 x 50==>b x 50 ==> b x 50\n","    W = tf.get_variable(\"FinalW\", [n_classes, n_classes], initializer=tf.truncated_normal_initializer())\n","    b = tf.get_variable(\"FinalB\", [n_classes], initializer=tf.truncated_normal_initializer())\n","    \n","    out = tf.matmul(x, W) + b\n","                            \n","\n","    return out"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"colab_type":"code","id":"h7AtFd4czh0W","colab":{}},"source":["batch_size = 64\n","display_step = 80\n","learning_rate = tf.placeholder(tf.float32)      # Learning rate to be fed\n","lr = 1e-3              # Learning rate start\n","tst = tf.placeholder(tf.bool)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"colab_type":"code","executionInfo":{"status":"ok","timestamp":1564498112667,"user_tz":-480,"elapsed":57920,"user":{"displayName":"徐伃萱","photoUrl":"","userId":"07249205515745393960"}},"id":"7LCc7xsQzh0Y","outputId":"6355a5d9-06ae-44a4-97fb-c71fd117bc8e","colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["# Setup the tensorflow...\n","config = tf.ConfigProto()\n","config.gpu_options.allow_growth = True\n","sess = tf.Session(config=config)\n","\n","print(\"Preparing the training & validation data...\")\n","train_data, train_labels, filelist1, glen1 = setup_inputs(sess, \"train.txt\", \"\", batch_size=batch_size)\n","val_data, val_labels, filelist2, tlen1 = setup_inputs(sess, \"val.txt\", \"\",isTest=True, batch_size=batch_size)\n","\n","max_iter = glen1*400\n","print(\"Preparing the training model with learning rate = %.5f...\" % (lr))\n","\n","\n","with tf.variable_scope(\"ResNet\") as scope:\n","  pred = ResNet(train_data, True)\n","  scope.reuse_variables()\n","  valpred = ResNet(val_data, False)\n","\n","with tf.name_scope('Loss_and_Accuracy'):\n","  update_ops = tf.get_collection(tf.GraphKeys.UPDATE_OPS)\n","  with tf.control_dependencies(update_ops):\n","    cost = tf.losses.sparse_softmax_cross_entropy(labels=train_labels, logits=pred)\n","    optimizer = tf.train.AdamOptimizer(learning_rate).minimize(cost)\n","    \n","  correct_prediction = tf.equal(tf.argmax(pred, 1), train_labels)\n","  accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\n","\n","  \n","  correct_prediction2 = tf.equal(tf.argmax(valpred,1), val_labels)\n","  accuracy2 = tf.reduce_mean(tf.cast(correct_prediction2, tf.float32))\n","  \n","  tf.summary.scalar('Loss', cost)\n","  tf.summary.scalar('Training_Accuracy', accuracy)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Preparing the training & validation data...\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING: Logging before flag parsing goes to stderr.\n","W0730 14:48:26.267714 140626505459584 deprecation.py:323] From <ipython-input-4-4690a01bcc50>:53: slice_input_producer (from tensorflow.python.training.input) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Queue-based input pipelines have been replaced by `tf.data`. Use `tf.data.Dataset.from_tensor_slices(tuple(tensor_list)).shuffle(tf.shape(input_tensor, out_type=tf.int64)[0]).repeat(num_epochs)`. If `shuffle=False`, omit the `.shuffle(...)`.\n","W0730 14:48:26.273440 140626505459584 deprecation.py:323] From /usr/local/lib/python3.6/dist-packages/tensorflow/python/training/input.py:374: range_input_producer (from tensorflow.python.training.input) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Queue-based input pipelines have been replaced by `tf.data`. Use `tf.data.Dataset.range(limit).shuffle(limit).repeat(num_epochs)`. If `shuffle=False`, omit the `.shuffle(...)`.\n","W0730 14:48:26.278054 140626505459584 deprecation.py:323] From /usr/local/lib/python3.6/dist-packages/tensorflow/python/training/input.py:320: input_producer (from tensorflow.python.training.input) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Queue-based input pipelines have been replaced by `tf.data`. Use `tf.data.Dataset.from_tensor_slices(input_tensor).shuffle(tf.shape(input_tensor, out_type=tf.int64)[0]).repeat(num_epochs)`. If `shuffle=False`, omit the `.shuffle(...)`.\n","W0730 14:48:26.282683 140626505459584 deprecation.py:323] From /usr/local/lib/python3.6/dist-packages/tensorflow/python/training/input.py:190: limit_epochs (from tensorflow.python.training.input) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Queue-based input pipelines have been replaced by `tf.data`. Use `tf.data.Dataset.from_tensors(tensor).repeat(num_epochs)`.\n","W0730 14:48:26.285896 140626505459584 deprecation.py:323] From /usr/local/lib/python3.6/dist-packages/tensorflow/python/training/input.py:199: QueueRunner.__init__ (from tensorflow.python.training.queue_runner_impl) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","To construct input pipelines, use the `tf.data` module.\n","W0730 14:48:26.288651 140626505459584 deprecation.py:323] From /usr/local/lib/python3.6/dist-packages/tensorflow/python/training/input.py:199: add_queue_runner (from tensorflow.python.training.queue_runner_impl) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","To construct input pipelines, use the `tf.data` module.\n","W0730 14:48:26.357700 140626505459584 deprecation.py:323] From <ipython-input-4-4690a01bcc50>:73: batch (from tensorflow.python.training.input) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Queue-based input pipelines have been replaced by `tf.data`. Use `tf.data.Dataset.batch(batch_size)` (or `padded_batch(...)` if `dynamic_pad=True`).\n","W0730 14:48:26.368271 140626505459584 deprecation.py:323] From <ipython-input-4-4690a01bcc50>:75: start_queue_runners (from tensorflow.python.training.queue_runner_impl) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","To construct input pipelines, use the `tf.data` module.\n"],"name":"stderr"},{"output_type":"stream","text":["Preparing the training model with learning rate = 0.00100...\n"],"name":"stdout"},{"output_type":"stream","text":["W0730 14:48:27.510212 140626505459584 deprecation.py:323] From <ipython-input-5-a437f7771a6d>:19: batch_normalization (from tensorflow.python.layers.normalization) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Use keras.layers.BatchNormalization instead.  In particular, `tf.control_dependencies(tf.GraphKeys.UPDATE_OPS)` should not be used (consult the `tf.keras.layers.batch_normalization` documentation).\n"],"name":"stderr"},{"output_type":"stream","text":["Layer [1]  [64, 73, 73, 64]\n","Layer [2]  [64, 73, 73, 64]\n","[L-1] Build 0th residual block 0 with 64 channels\n","Layer [3]  [64, 73, 73, 64]\n","Layer [4]  [64, 73, 73, 64]\n","[L-2] Build 0th residual block 1 with 64 channels\n","Layer [5]  [64, 73, 73, 64]\n","Layer [6]  [64, 73, 73, 64]\n","[L-3] Build 0th residual block 2 with 64 channels\n","[L-4] Build 0th connection layer 2 from 64 to 128 channels\n","Layer [7]  [64, 36, 36, 128]\n","Layer [8]  [64, 36, 36, 128]\n","[L-5] Build 1th residual block 0 with 128 channels\n","Layer [9]  [64, 36, 36, 128]\n","Layer [10]  [64, 36, 36, 128]\n","[L-6] Build 1th residual block 1 with 128 channels\n","Layer [11]  [64, 36, 36, 128]\n","Layer [12]  [64, 36, 36, 128]\n","[L-7] Build 1th residual block 2 with 128 channels\n","Layer [13]  [64, 36, 36, 128]\n","Layer [14]  [64, 36, 36, 128]\n","[L-8] Build 1th residual block 3 with 128 channels\n","[L-9] Build 1th connection layer 3 from 128 to 256 channels\n","Layer [15]  [64, 17, 17, 256]\n","Layer [16]  [64, 17, 17, 256]\n","[L-10] Build 2th residual block 0 with 256 channels\n","Layer [17]  [64, 17, 17, 256]\n","Layer [18]  [64, 17, 17, 256]\n","[L-11] Build 2th residual block 1 with 256 channels\n","Layer [19]  [64, 17, 17, 256]\n","Layer [20]  [64, 17, 17, 256]\n","[L-12] Build 2th residual block 2 with 256 channels\n","Layer [21]  [64, 17, 17, 256]\n","Layer [22]  [64, 17, 17, 256]\n","[L-13] Build 2th residual block 3 with 256 channels\n","Layer [23]  [64, 17, 17, 256]\n","Layer [24]  [64, 17, 17, 256]\n","[L-14] Build 2th residual block 4 with 256 channels\n","Layer [25]  [64, 17, 17, 256]\n","Layer [26]  [64, 17, 17, 256]\n","[L-15] Build 2th residual block 5 with 256 channels\n","[L-16] Build 2th connection layer 5 from 256 to 512 channels\n","Layer [27]  [64, 8, 8, 512]\n","Layer [28]  [64, 8, 8, 512]\n","[L-17] Build 3th residual block 0 with 512 channels\n","Layer [29]  [64, 8, 8, 512]\n","Layer [30]  [64, 8, 8, 512]\n","[L-18] Build 3th residual block 1 with 512 channels\n","Layer [31]  [64, 8, 8, 512]\n","Layer [32]  [64, 8, 8, 512]\n","[L-19] Build 3th residual block 2 with 512 channels\n","Layer [33]  [64, 73, 73, 64]\n","Layer [34]  [64, 73, 73, 64]\n","[L-1] Build 0th residual block 0 with 64 channels\n","Layer [35]  [64, 73, 73, 64]\n","Layer [36]  [64, 73, 73, 64]\n","[L-2] Build 0th residual block 1 with 64 channels\n","Layer [37]  [64, 73, 73, 64]\n","Layer [38]  [64, 73, 73, 64]\n","[L-3] Build 0th residual block 2 with 64 channels\n","[L-4] Build 0th connection layer 2 from 64 to 128 channels\n","Layer [39]  [64, 36, 36, 128]\n","Layer [40]  [64, 36, 36, 128]\n","[L-5] Build 1th residual block 0 with 128 channels\n","Layer [41]  [64, 36, 36, 128]\n","Layer [42]  [64, 36, 36, 128]\n","[L-6] Build 1th residual block 1 with 128 channels\n","Layer [43]  [64, 36, 36, 128]\n","Layer [44]  [64, 36, 36, 128]\n","[L-7] Build 1th residual block 2 with 128 channels\n","Layer [45]  [64, 36, 36, 128]\n","Layer [46]  [64, 36, 36, 128]\n","[L-8] Build 1th residual block 3 with 128 channels\n","[L-9] Build 1th connection layer 3 from 128 to 256 channels\n","Layer [47]  [64, 17, 17, 256]\n","Layer [48]  [64, 17, 17, 256]\n","[L-10] Build 2th residual block 0 with 256 channels\n","Layer [49]  [64, 17, 17, 256]\n","Layer [50]  [64, 17, 17, 256]\n","[L-11] Build 2th residual block 1 with 256 channels\n","Layer [51]  [64, 17, 17, 256]\n","Layer [52]  [64, 17, 17, 256]\n","[L-12] Build 2th residual block 2 with 256 channels\n","Layer [53]  [64, 17, 17, 256]\n","Layer [54]  [64, 17, 17, 256]\n","[L-13] Build 2th residual block 3 with 256 channels\n","Layer [55]  [64, 17, 17, 256]\n","Layer [56]  [64, 17, 17, 256]\n","[L-14] Build 2th residual block 4 with 256 channels\n","Layer [57]  [64, 17, 17, 256]\n","Layer [58]  [64, 17, 17, 256]\n","[L-15] Build 2th residual block 5 with 256 channels\n"],"name":"stdout"},{"output_type":"stream","text":["W0730 14:48:30.257504 140626505459584 deprecation.py:323] From /usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/losses/losses_impl.py:121: add_dispatch_support.<locals>.wrapper (from tensorflow.python.ops.array_ops) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Use tf.where in 2.0, which has the same broadcast rule as np.where\n"],"name":"stderr"},{"output_type":"stream","text":["[L-16] Build 2th connection layer 5 from 256 to 512 channels\n","Layer [59]  [64, 8, 8, 512]\n","Layer [60]  [64, 8, 8, 512]\n","[L-17] Build 3th residual block 0 with 512 channels\n","Layer [61]  [64, 8, 8, 512]\n","Layer [62]  [64, 8, 8, 512]\n","[L-18] Build 3th residual block 1 with 512 channels\n","Layer [63]  [64, 8, 8, 512]\n","Layer [64]  [64, 8, 8, 512]\n","[L-19] Build 3th residual block 2 with 512 channels\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab_type":"code","id":"3CGfQ_Cbzh0c","outputId":"5dabd1f1-a746-4348-8860-1487651e8d72","scrolled":true,"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["saver = tf.train.Saver()\n","init = tf.global_variables_initializer()\n","sess.run(init)\n","step = 0\n","writer = tf.summary.FileWriter(\"/tmp/log2\", sess.graph)\n","summaries = tf.summary.merge_all()\n","\n","print(\"We are going to train the ImageNet model based on ResNet!!!\")\n","while (step * batch_size) < max_iter:\n","    epoch1=np.floor((step*batch_size)/glen1)\n","    if (((step*batch_size)%glen1 < batch_size) & (lr==1e-3) & (epoch1 >2)):\n","        lr /= 10\n","\n","    sess.run(optimizer,  feed_dict={learning_rate: lr, tst: True})\n","\n","    if (step % 15000==1) & (step>15000):\n","        save_path = saver.save(sess, \"tf_resnet_model_iter\" + str(step) + \".ckpt\")\n","        print(\"Model saved in file at iteration %d: %s\" % (step*batch_size,save_path))\n","\n","    if step % display_step == 1:\n","        # calculate the loss\n","        \n","        loss, acc, summaries_string = sess.run([cost, accuracy, summaries], feed_dict={ tst: True})\n","        print(\"Iter=%d/epoch=%d, Loss=%.6f, Training Accuracy=%.6f, lr=%f\" % (step*batch_size, epoch1 ,loss, acc, lr))\n","        writer.add_summary(summaries_string, step)\n","        \n","#         if step*batch_size==82048:\n","#         import pdb\n","#         pdb.set_trace()\n","\n","  \n","    step += 1\n","print(\"Optimization Finished!\")\n","save_path = saver.save(sess, \"tf_resnet_model.ckpt\")\n","print(\"Model saved in file: %s\" % save_path)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["We are going to train the ImageNet model based on ResNet!!!\n","Iter=64/epoch=0, Loss=9.736479, Training Accuracy=0.078125, lr=0.001000\n","Iter=5184/epoch=0, Loss=4.798636, Training Accuracy=0.078125, lr=0.001000\n","Iter=10304/epoch=0, Loss=4.153975, Training Accuracy=0.078125, lr=0.001000\n","Iter=15424/epoch=0, Loss=3.823322, Training Accuracy=0.093750, lr=0.001000\n","Iter=20544/epoch=0, Loss=3.656534, Training Accuracy=0.109375, lr=0.001000\n","Iter=25664/epoch=0, Loss=3.370980, Training Accuracy=0.171875, lr=0.001000\n","Iter=30784/epoch=0, Loss=3.514466, Training Accuracy=0.109375, lr=0.001000\n","Iter=35904/epoch=0, Loss=3.496415, Training Accuracy=0.093750, lr=0.001000\n","Iter=41024/epoch=0, Loss=3.599909, Training Accuracy=0.140625, lr=0.001000\n","Iter=46144/epoch=0, Loss=3.388586, Training Accuracy=0.187500, lr=0.001000\n","Iter=51264/epoch=0, Loss=3.356286, Training Accuracy=0.140625, lr=0.001000\n","Iter=56384/epoch=0, Loss=3.279206, Training Accuracy=0.171875, lr=0.001000\n","Iter=61504/epoch=0, Loss=3.171465, Training Accuracy=0.203125, lr=0.001000\n","Iter=66624/epoch=1, Loss=3.387332, Training Accuracy=0.171875, lr=0.001000\n","Iter=71744/epoch=1, Loss=3.163801, Training Accuracy=0.187500, lr=0.001000\n","Iter=76864/epoch=1, Loss=3.458991, Training Accuracy=0.140625, lr=0.001000\n","Iter=81984/epoch=1, Loss=3.398847, Training Accuracy=0.156250, lr=0.001000\n","Iter=87104/epoch=1, Loss=3.090293, Training Accuracy=0.140625, lr=0.001000\n","Iter=92224/epoch=1, Loss=3.555364, Training Accuracy=0.125000, lr=0.001000\n","Iter=97344/epoch=1, Loss=3.083458, Training Accuracy=0.187500, lr=0.001000\n","Iter=102464/epoch=1, Loss=3.029800, Training Accuracy=0.203125, lr=0.001000\n","Iter=107584/epoch=1, Loss=3.149422, Training Accuracy=0.156250, lr=0.001000\n","Iter=112704/epoch=1, Loss=2.804009, Training Accuracy=0.203125, lr=0.001000\n","Iter=117824/epoch=1, Loss=3.162233, Training Accuracy=0.078125, lr=0.001000\n","Iter=122944/epoch=1, Loss=2.961513, Training Accuracy=0.140625, lr=0.001000\n","Iter=128064/epoch=2, Loss=3.098683, Training Accuracy=0.203125, lr=0.001000\n","Iter=133184/epoch=2, Loss=2.773690, Training Accuracy=0.312500, lr=0.001000\n","Iter=138304/epoch=2, Loss=3.247243, Training Accuracy=0.140625, lr=0.001000\n","Iter=143424/epoch=2, Loss=2.795739, Training Accuracy=0.296875, lr=0.001000\n","Iter=148544/epoch=2, Loss=2.927610, Training Accuracy=0.171875, lr=0.001000\n","Iter=153664/epoch=2, Loss=2.947770, Training Accuracy=0.140625, lr=0.001000\n","Iter=158784/epoch=2, Loss=2.810917, Training Accuracy=0.218750, lr=0.001000\n","Iter=163904/epoch=2, Loss=2.771968, Training Accuracy=0.250000, lr=0.001000\n","Iter=169024/epoch=2, Loss=2.883039, Training Accuracy=0.250000, lr=0.001000\n","Iter=174144/epoch=2, Loss=2.724336, Training Accuracy=0.250000, lr=0.001000\n","Iter=179264/epoch=2, Loss=3.058868, Training Accuracy=0.187500, lr=0.001000\n","Iter=184384/epoch=2, Loss=2.955056, Training Accuracy=0.234375, lr=0.001000\n","Iter=189504/epoch=2, Loss=3.183885, Training Accuracy=0.109375, lr=0.001000\n","Iter=194624/epoch=3, Loss=2.769607, Training Accuracy=0.250000, lr=0.000100\n","Iter=199744/epoch=3, Loss=2.874431, Training Accuracy=0.156250, lr=0.000100\n","Iter=204864/epoch=3, Loss=2.947563, Training Accuracy=0.171875, lr=0.000100\n","Iter=209984/epoch=3, Loss=2.686122, Training Accuracy=0.265625, lr=0.000100\n","Iter=215104/epoch=3, Loss=2.605926, Training Accuracy=0.281250, lr=0.000100\n","Iter=220224/epoch=3, Loss=2.936528, Training Accuracy=0.281250, lr=0.000100\n","Iter=225344/epoch=3, Loss=2.791732, Training Accuracy=0.250000, lr=0.000100\n","Iter=230464/epoch=3, Loss=2.599518, Training Accuracy=0.296875, lr=0.000100\n","Iter=235584/epoch=3, Loss=2.851928, Training Accuracy=0.171875, lr=0.000100\n","Iter=240704/epoch=3, Loss=2.993447, Training Accuracy=0.156250, lr=0.000100\n","Iter=245824/epoch=3, Loss=2.590025, Training Accuracy=0.203125, lr=0.000100\n","Iter=250944/epoch=3, Loss=2.713094, Training Accuracy=0.250000, lr=0.000100\n","Iter=256064/epoch=4, Loss=2.723846, Training Accuracy=0.218750, lr=0.000100\n","Iter=261184/epoch=4, Loss=2.625275, Training Accuracy=0.281250, lr=0.000100\n","Iter=266304/epoch=4, Loss=2.684801, Training Accuracy=0.328125, lr=0.000100\n","Iter=271424/epoch=4, Loss=2.592882, Training Accuracy=0.359375, lr=0.000100\n","Iter=276544/epoch=4, Loss=2.404454, Training Accuracy=0.375000, lr=0.000100\n","Iter=281664/epoch=4, Loss=2.699575, Training Accuracy=0.312500, lr=0.000100\n","Iter=286784/epoch=4, Loss=2.521608, Training Accuracy=0.281250, lr=0.000100\n","Iter=291904/epoch=4, Loss=2.727376, Training Accuracy=0.234375, lr=0.000100\n","Iter=297024/epoch=4, Loss=2.453449, Training Accuracy=0.265625, lr=0.000100\n","Iter=302144/epoch=4, Loss=2.842867, Training Accuracy=0.218750, lr=0.000100\n","Iter=307264/epoch=4, Loss=3.078820, Training Accuracy=0.156250, lr=0.000100\n","Iter=312384/epoch=4, Loss=2.653732, Training Accuracy=0.281250, lr=0.000100\n","Iter=317504/epoch=5, Loss=2.441844, Training Accuracy=0.343750, lr=0.000100\n","Iter=322624/epoch=5, Loss=2.349168, Training Accuracy=0.312500, lr=0.000100\n","Iter=327744/epoch=5, Loss=2.832995, Training Accuracy=0.250000, lr=0.000100\n","Iter=332864/epoch=5, Loss=2.702222, Training Accuracy=0.343750, lr=0.000100\n","Iter=337984/epoch=5, Loss=2.923231, Training Accuracy=0.218750, lr=0.000100\n","Iter=343104/epoch=5, Loss=2.582385, Training Accuracy=0.250000, lr=0.000100\n","Iter=348224/epoch=5, Loss=2.444883, Training Accuracy=0.281250, lr=0.000100\n","Iter=353344/epoch=5, Loss=3.060295, Training Accuracy=0.250000, lr=0.000100\n","Iter=358464/epoch=5, Loss=2.958075, Training Accuracy=0.187500, lr=0.000100\n","Iter=363584/epoch=5, Loss=2.785265, Training Accuracy=0.218750, lr=0.000100\n","Iter=368704/epoch=5, Loss=2.505525, Training Accuracy=0.203125, lr=0.000100\n","Iter=373824/epoch=5, Loss=2.698363, Training Accuracy=0.312500, lr=0.000100\n","Iter=378944/epoch=5, Loss=2.454781, Training Accuracy=0.359375, lr=0.000100\n","Iter=384064/epoch=6, Loss=2.493909, Training Accuracy=0.281250, lr=0.000100\n","Iter=389184/epoch=6, Loss=2.906977, Training Accuracy=0.250000, lr=0.000100\n","Iter=394304/epoch=6, Loss=2.572145, Training Accuracy=0.312500, lr=0.000100\n","Iter=399424/epoch=6, Loss=2.863139, Training Accuracy=0.296875, lr=0.000100\n","Iter=404544/epoch=6, Loss=2.709373, Training Accuracy=0.281250, lr=0.000100\n","Iter=409664/epoch=6, Loss=2.732975, Training Accuracy=0.312500, lr=0.000100\n","Iter=414784/epoch=6, Loss=2.735091, Training Accuracy=0.250000, lr=0.000100\n","Iter=419904/epoch=6, Loss=2.826519, Training Accuracy=0.171875, lr=0.000100\n","Iter=425024/epoch=6, Loss=2.588434, Training Accuracy=0.250000, lr=0.000100\n","Iter=430144/epoch=6, Loss=2.884635, Training Accuracy=0.171875, lr=0.000100\n","Iter=435264/epoch=6, Loss=2.889164, Training Accuracy=0.171875, lr=0.000100\n","Iter=440384/epoch=6, Loss=2.638411, Training Accuracy=0.343750, lr=0.000100\n","Iter=445504/epoch=7, Loss=2.477446, Training Accuracy=0.296875, lr=0.000100\n","Iter=450624/epoch=7, Loss=2.801352, Training Accuracy=0.359375, lr=0.000100\n","Iter=455744/epoch=7, Loss=2.732453, Training Accuracy=0.234375, lr=0.000100\n","Iter=460864/epoch=7, Loss=2.566100, Training Accuracy=0.328125, lr=0.000100\n","Iter=465984/epoch=7, Loss=2.562380, Training Accuracy=0.250000, lr=0.000100\n","Iter=471104/epoch=7, Loss=2.835165, Training Accuracy=0.296875, lr=0.000100\n","Iter=476224/epoch=7, Loss=2.932874, Training Accuracy=0.250000, lr=0.000100\n","Iter=481344/epoch=7, Loss=2.643196, Training Accuracy=0.265625, lr=0.000100\n","Iter=486464/epoch=7, Loss=2.504669, Training Accuracy=0.328125, lr=0.000100\n","Iter=491584/epoch=7, Loss=2.707933, Training Accuracy=0.328125, lr=0.000100\n","Iter=496704/epoch=7, Loss=2.704462, Training Accuracy=0.234375, lr=0.000100\n","Iter=501824/epoch=7, Loss=2.652109, Training Accuracy=0.203125, lr=0.000100\n","Iter=506944/epoch=8, Loss=2.845139, Training Accuracy=0.218750, lr=0.000100\n","Iter=512064/epoch=8, Loss=2.680601, Training Accuracy=0.296875, lr=0.000100\n","Iter=517184/epoch=8, Loss=2.770063, Training Accuracy=0.359375, lr=0.000100\n","Iter=522304/epoch=8, Loss=3.091784, Training Accuracy=0.171875, lr=0.000100\n","Iter=527424/epoch=8, Loss=2.730611, Training Accuracy=0.218750, lr=0.000100\n","Iter=532544/epoch=8, Loss=2.592001, Training Accuracy=0.328125, lr=0.000100\n","Iter=537664/epoch=8, Loss=2.740633, Training Accuracy=0.250000, lr=0.000100\n","Iter=542784/epoch=8, Loss=2.503742, Training Accuracy=0.328125, lr=0.000100\n","Iter=547904/epoch=8, Loss=2.554985, Training Accuracy=0.250000, lr=0.000100\n","Iter=553024/epoch=8, Loss=2.448059, Training Accuracy=0.375000, lr=0.000100\n","Iter=558144/epoch=8, Loss=2.599133, Training Accuracy=0.296875, lr=0.000100\n","Iter=563264/epoch=8, Loss=2.425793, Training Accuracy=0.359375, lr=0.000100\n","Iter=568384/epoch=8, Loss=2.624469, Training Accuracy=0.265625, lr=0.000100\n","Iter=573504/epoch=9, Loss=2.737388, Training Accuracy=0.265625, lr=0.000100\n","Iter=578624/epoch=9, Loss=2.207628, Training Accuracy=0.375000, lr=0.000100\n","Iter=583744/epoch=9, Loss=2.695895, Training Accuracy=0.265625, lr=0.000100\n","Iter=588864/epoch=9, Loss=2.876990, Training Accuracy=0.250000, lr=0.000100\n","Iter=593984/epoch=9, Loss=2.562006, Training Accuracy=0.312500, lr=0.000100\n","Iter=599104/epoch=9, Loss=2.546008, Training Accuracy=0.375000, lr=0.000100\n","Iter=604224/epoch=9, Loss=2.415761, Training Accuracy=0.328125, lr=0.000100\n","Iter=609344/epoch=9, Loss=2.678502, Training Accuracy=0.281250, lr=0.000100\n","Iter=614464/epoch=9, Loss=2.786163, Training Accuracy=0.218750, lr=0.000100\n","Iter=619584/epoch=9, Loss=2.564706, Training Accuracy=0.265625, lr=0.000100\n","Iter=624704/epoch=9, Loss=2.638686, Training Accuracy=0.218750, lr=0.000100\n","Iter=629824/epoch=9, Loss=2.371694, Training Accuracy=0.343750, lr=0.000100\n","Iter=634944/epoch=10, Loss=2.395372, Training Accuracy=0.328125, lr=0.000100\n","Iter=640064/epoch=10, Loss=2.590885, Training Accuracy=0.328125, lr=0.000100\n","Iter=645184/epoch=10, Loss=2.638249, Training Accuracy=0.234375, lr=0.000100\n","Iter=650304/epoch=10, Loss=2.246306, Training Accuracy=0.375000, lr=0.000100\n","Iter=655424/epoch=10, Loss=2.548363, Training Accuracy=0.250000, lr=0.000100\n","Iter=660544/epoch=10, Loss=2.451810, Training Accuracy=0.265625, lr=0.000100\n","Iter=665664/epoch=10, Loss=2.603921, Training Accuracy=0.296875, lr=0.000100\n","Iter=670784/epoch=10, Loss=2.407255, Training Accuracy=0.328125, lr=0.000100\n","Iter=675904/epoch=10, Loss=2.770739, Training Accuracy=0.296875, lr=0.000100\n","Iter=681024/epoch=10, Loss=2.469724, Training Accuracy=0.343750, lr=0.000100\n","Iter=686144/epoch=10, Loss=2.643982, Training Accuracy=0.328125, lr=0.000100\n","Iter=691264/epoch=10, Loss=2.741149, Training Accuracy=0.250000, lr=0.000100\n","Iter=696384/epoch=10, Loss=2.260823, Training Accuracy=0.359375, lr=0.000100\n","Iter=701504/epoch=11, Loss=2.684022, Training Accuracy=0.203125, lr=0.000100\n","Iter=706624/epoch=11, Loss=2.591486, Training Accuracy=0.265625, lr=0.000100\n","Iter=711744/epoch=11, Loss=2.668919, Training Accuracy=0.406250, lr=0.000100\n","Iter=716864/epoch=11, Loss=2.429745, Training Accuracy=0.343750, lr=0.000100\n","Iter=721984/epoch=11, Loss=2.323976, Training Accuracy=0.265625, lr=0.000100\n","Iter=727104/epoch=11, Loss=2.447740, Training Accuracy=0.281250, lr=0.000100\n","Iter=732224/epoch=11, Loss=2.706425, Training Accuracy=0.250000, lr=0.000100\n","Iter=737344/epoch=11, Loss=2.549219, Training Accuracy=0.421875, lr=0.000100\n","Iter=742464/epoch=11, Loss=2.845966, Training Accuracy=0.234375, lr=0.000100\n","Iter=747584/epoch=11, Loss=2.320304, Training Accuracy=0.343750, lr=0.000100\n","Iter=752704/epoch=11, Loss=2.622967, Training Accuracy=0.312500, lr=0.000100\n","Iter=757824/epoch=11, Loss=2.383493, Training Accuracy=0.296875, lr=0.000100\n","Iter=762944/epoch=12, Loss=2.440038, Training Accuracy=0.296875, lr=0.000100\n","Iter=768064/epoch=12, Loss=2.829301, Training Accuracy=0.265625, lr=0.000100\n","Iter=773184/epoch=12, Loss=2.489854, Training Accuracy=0.265625, lr=0.000100\n","Iter=778304/epoch=12, Loss=2.558483, Training Accuracy=0.312500, lr=0.000100\n","Iter=783424/epoch=12, Loss=2.542342, Training Accuracy=0.343750, lr=0.000100\n","Iter=788544/epoch=12, Loss=2.226023, Training Accuracy=0.343750, lr=0.000100\n","Iter=793664/epoch=12, Loss=2.394083, Training Accuracy=0.328125, lr=0.000100\n","Iter=798784/epoch=12, Loss=2.667970, Training Accuracy=0.281250, lr=0.000100\n","Iter=803904/epoch=12, Loss=2.227535, Training Accuracy=0.328125, lr=0.000100\n","Iter=809024/epoch=12, Loss=2.394894, Training Accuracy=0.312500, lr=0.000100\n","Iter=814144/epoch=12, Loss=2.745913, Training Accuracy=0.312500, lr=0.000100\n","Iter=819264/epoch=12, Loss=2.701187, Training Accuracy=0.234375, lr=0.000100\n","Iter=824384/epoch=13, Loss=2.428847, Training Accuracy=0.281250, lr=0.000100\n","Iter=829504/epoch=13, Loss=2.327065, Training Accuracy=0.328125, lr=0.000100\n","Iter=834624/epoch=13, Loss=2.737563, Training Accuracy=0.234375, lr=0.000100\n","Iter=839744/epoch=13, Loss=2.401053, Training Accuracy=0.328125, lr=0.000100\n","Iter=844864/epoch=13, Loss=2.597272, Training Accuracy=0.296875, lr=0.000100\n","Iter=849984/epoch=13, Loss=2.519239, Training Accuracy=0.328125, lr=0.000100\n","Iter=855104/epoch=13, Loss=2.798588, Training Accuracy=0.187500, lr=0.000100\n","Iter=860224/epoch=13, Loss=2.689247, Training Accuracy=0.187500, lr=0.000100\n","Iter=865344/epoch=13, Loss=2.470635, Training Accuracy=0.234375, lr=0.000100\n","Iter=870464/epoch=13, Loss=2.413607, Training Accuracy=0.359375, lr=0.000100\n","Iter=875584/epoch=13, Loss=2.232525, Training Accuracy=0.421875, lr=0.000100\n","Iter=880704/epoch=13, Loss=2.611146, Training Accuracy=0.328125, lr=0.000100\n","Iter=885824/epoch=13, Loss=2.406388, Training Accuracy=0.359375, lr=0.000100\n","Iter=890944/epoch=14, Loss=2.716346, Training Accuracy=0.281250, lr=0.000100\n","Iter=896064/epoch=14, Loss=2.584951, Training Accuracy=0.375000, lr=0.000100\n","Iter=901184/epoch=14, Loss=2.673961, Training Accuracy=0.281250, lr=0.000100\n","Iter=906304/epoch=14, Loss=2.353394, Training Accuracy=0.328125, lr=0.000100\n","Iter=911424/epoch=14, Loss=2.579651, Training Accuracy=0.265625, lr=0.000100\n","Iter=916544/epoch=14, Loss=2.695176, Training Accuracy=0.250000, lr=0.000100\n","Iter=921664/epoch=14, Loss=2.782804, Training Accuracy=0.250000, lr=0.000100\n","Iter=926784/epoch=14, Loss=2.341761, Training Accuracy=0.359375, lr=0.000100\n","Iter=931904/epoch=14, Loss=2.536716, Training Accuracy=0.328125, lr=0.000100\n","Iter=937024/epoch=14, Loss=2.574308, Training Accuracy=0.296875, lr=0.000100\n","Iter=942144/epoch=14, Loss=2.588297, Training Accuracy=0.343750, lr=0.000100\n","Iter=947264/epoch=14, Loss=2.438124, Training Accuracy=0.296875, lr=0.000100\n","Iter=952384/epoch=15, Loss=2.713480, Training Accuracy=0.296875, lr=0.000100\n","Iter=957504/epoch=15, Loss=2.445166, Training Accuracy=0.343750, lr=0.000100\n","Model saved in file at iteration 960064: tf_resnet_model_iter15001.ckpt\n","Iter=962624/epoch=15, Loss=2.453532, Training Accuracy=0.296875, lr=0.000100\n","Iter=967744/epoch=15, Loss=2.603003, Training Accuracy=0.265625, lr=0.000100\n","Iter=972864/epoch=15, Loss=2.386009, Training Accuracy=0.328125, lr=0.000100\n","Iter=977984/epoch=15, Loss=2.584201, Training Accuracy=0.312500, lr=0.000100\n","Iter=983104/epoch=15, Loss=2.297960, Training Accuracy=0.437500, lr=0.000100\n","Iter=988224/epoch=15, Loss=2.521712, Training Accuracy=0.250000, lr=0.000100\n","Iter=993344/epoch=15, Loss=2.608613, Training Accuracy=0.234375, lr=0.000100\n","Iter=998464/epoch=15, Loss=2.231397, Training Accuracy=0.406250, lr=0.000100\n","Iter=1003584/epoch=15, Loss=2.654057, Training Accuracy=0.265625, lr=0.000100\n","Iter=1008704/epoch=15, Loss=2.296598, Training Accuracy=0.343750, lr=0.000100\n","Iter=1013824/epoch=16, Loss=2.617825, Training Accuracy=0.250000, lr=0.000100\n","Iter=1018944/epoch=16, Loss=2.573040, Training Accuracy=0.296875, lr=0.000100\n","Iter=1024064/epoch=16, Loss=2.369482, Training Accuracy=0.312500, lr=0.000100\n","Iter=1029184/epoch=16, Loss=2.720813, Training Accuracy=0.250000, lr=0.000100\n","Iter=1034304/epoch=16, Loss=2.227187, Training Accuracy=0.343750, lr=0.000100\n","Iter=1039424/epoch=16, Loss=2.432024, Training Accuracy=0.359375, lr=0.000100\n","Iter=1044544/epoch=16, Loss=2.570265, Training Accuracy=0.359375, lr=0.000100\n","Iter=1049664/epoch=16, Loss=2.845950, Training Accuracy=0.250000, lr=0.000100\n","Iter=1054784/epoch=16, Loss=2.776250, Training Accuracy=0.218750, lr=0.000100\n","Iter=1059904/epoch=16, Loss=2.166011, Training Accuracy=0.359375, lr=0.000100\n","Iter=1065024/epoch=16, Loss=2.441117, Training Accuracy=0.281250, lr=0.000100\n","Iter=1070144/epoch=16, Loss=2.350547, Training Accuracy=0.328125, lr=0.000100\n","Iter=1075264/epoch=16, Loss=2.427496, Training Accuracy=0.328125, lr=0.000100\n","Iter=1080384/epoch=17, Loss=2.400182, Training Accuracy=0.390625, lr=0.000100\n","Iter=1085504/epoch=17, Loss=2.487855, Training Accuracy=0.328125, lr=0.000100\n","Iter=1090624/epoch=17, Loss=2.449356, Training Accuracy=0.390625, lr=0.000100\n","Iter=1095744/epoch=17, Loss=2.364135, Training Accuracy=0.343750, lr=0.000100\n","Iter=1100864/epoch=17, Loss=2.300472, Training Accuracy=0.390625, lr=0.000100\n","Iter=1105984/epoch=17, Loss=2.477430, Training Accuracy=0.265625, lr=0.000100\n","Iter=1111104/epoch=17, Loss=2.298656, Training Accuracy=0.421875, lr=0.000100\n","Iter=1116224/epoch=17, Loss=2.571935, Training Accuracy=0.296875, lr=0.000100\n","Iter=1121344/epoch=17, Loss=2.750356, Training Accuracy=0.312500, lr=0.000100\n","Iter=1126464/epoch=17, Loss=2.322140, Training Accuracy=0.281250, lr=0.000100\n","Iter=1131584/epoch=17, Loss=2.488488, Training Accuracy=0.328125, lr=0.000100\n","Iter=1136704/epoch=17, Loss=2.912073, Training Accuracy=0.265625, lr=0.000100\n","Iter=1141824/epoch=18, Loss=2.440390, Training Accuracy=0.328125, lr=0.000100\n","Iter=1146944/epoch=18, Loss=2.661502, Training Accuracy=0.343750, lr=0.000100\n","Iter=1152064/epoch=18, Loss=2.421307, Training Accuracy=0.312500, lr=0.000100\n","Iter=1157184/epoch=18, Loss=2.272394, Training Accuracy=0.484375, lr=0.000100\n","Iter=1162304/epoch=18, Loss=2.445180, Training Accuracy=0.281250, lr=0.000100\n","Iter=1167424/epoch=18, Loss=2.397539, Training Accuracy=0.359375, lr=0.000100\n","Iter=1172544/epoch=18, Loss=2.170615, Training Accuracy=0.375000, lr=0.000100\n","Iter=1177664/epoch=18, Loss=2.476274, Training Accuracy=0.312500, lr=0.000100\n","Iter=1182784/epoch=18, Loss=2.197363, Training Accuracy=0.390625, lr=0.000100\n","Iter=1187904/epoch=18, Loss=2.344985, Training Accuracy=0.390625, lr=0.000100\n","Iter=1193024/epoch=18, Loss=2.271453, Training Accuracy=0.359375, lr=0.000100\n","Iter=1198144/epoch=18, Loss=2.166192, Training Accuracy=0.375000, lr=0.000100\n","Iter=1203264/epoch=19, Loss=2.510149, Training Accuracy=0.312500, lr=0.000100\n","Iter=1208384/epoch=19, Loss=2.387541, Training Accuracy=0.296875, lr=0.000100\n","Iter=1213504/epoch=19, Loss=2.559764, Training Accuracy=0.281250, lr=0.000100\n","Iter=1218624/epoch=19, Loss=2.458210, Training Accuracy=0.406250, lr=0.000100\n","Iter=1223744/epoch=19, Loss=2.417778, Training Accuracy=0.312500, lr=0.000100\n","Iter=1228864/epoch=19, Loss=2.471921, Training Accuracy=0.343750, lr=0.000100\n","Iter=1233984/epoch=19, Loss=2.332234, Training Accuracy=0.296875, lr=0.000100\n","Iter=1239104/epoch=19, Loss=2.366875, Training Accuracy=0.421875, lr=0.000100\n","Iter=1244224/epoch=19, Loss=2.421247, Training Accuracy=0.265625, lr=0.000100\n","Iter=1249344/epoch=19, Loss=2.516641, Training Accuracy=0.250000, lr=0.000100\n","Iter=1254464/epoch=19, Loss=2.470496, Training Accuracy=0.296875, lr=0.000100\n","Iter=1259584/epoch=19, Loss=2.566268, Training Accuracy=0.296875, lr=0.000100\n","Iter=1264704/epoch=19, Loss=2.401938, Training Accuracy=0.421875, lr=0.000100\n","Iter=1269824/epoch=20, Loss=1.965983, Training Accuracy=0.515625, lr=0.000100\n","Iter=1274944/epoch=20, Loss=2.425284, Training Accuracy=0.375000, lr=0.000100\n","Iter=1280064/epoch=20, Loss=2.422843, Training Accuracy=0.343750, lr=0.000100\n","Iter=1285184/epoch=20, Loss=2.381372, Training Accuracy=0.343750, lr=0.000100\n","Iter=1290304/epoch=20, Loss=2.213393, Training Accuracy=0.406250, lr=0.000100\n","Iter=1295424/epoch=20, Loss=2.560658, Training Accuracy=0.265625, lr=0.000100\n","Iter=1300544/epoch=20, Loss=2.272539, Training Accuracy=0.375000, lr=0.000100\n","Iter=1305664/epoch=20, Loss=2.676105, Training Accuracy=0.296875, lr=0.000100\n","Iter=1310784/epoch=20, Loss=2.305436, Training Accuracy=0.312500, lr=0.000100\n","Iter=1315904/epoch=20, Loss=2.519151, Training Accuracy=0.265625, lr=0.000100\n","Iter=1321024/epoch=20, Loss=2.295805, Training Accuracy=0.312500, lr=0.000100\n","Iter=1326144/epoch=20, Loss=2.493147, Training Accuracy=0.359375, lr=0.000100\n","Iter=1331264/epoch=21, Loss=2.287961, Training Accuracy=0.343750, lr=0.000100\n","Iter=1336384/epoch=21, Loss=2.217938, Training Accuracy=0.359375, lr=0.000100\n","Iter=1341504/epoch=21, Loss=2.309441, Training Accuracy=0.375000, lr=0.000100\n","Iter=1346624/epoch=21, Loss=2.404171, Training Accuracy=0.343750, lr=0.000100\n","Iter=1351744/epoch=21, Loss=2.570227, Training Accuracy=0.312500, lr=0.000100\n","Iter=1356864/epoch=21, Loss=2.223860, Training Accuracy=0.406250, lr=0.000100\n","Iter=1361984/epoch=21, Loss=2.507994, Training Accuracy=0.312500, lr=0.000100\n","Iter=1367104/epoch=21, Loss=2.352077, Training Accuracy=0.359375, lr=0.000100\n","Iter=1372224/epoch=21, Loss=2.533080, Training Accuracy=0.328125, lr=0.000100\n","Iter=1377344/epoch=21, Loss=2.428327, Training Accuracy=0.312500, lr=0.000100\n","Iter=1382464/epoch=21, Loss=2.223419, Training Accuracy=0.343750, lr=0.000100\n","Iter=1387584/epoch=21, Loss=2.385669, Training Accuracy=0.296875, lr=0.000100\n","Iter=1392704/epoch=21, Loss=2.213084, Training Accuracy=0.437500, lr=0.000100\n","Iter=1397824/epoch=22, Loss=2.328646, Training Accuracy=0.312500, lr=0.000100\n","Iter=1402944/epoch=22, Loss=2.144605, Training Accuracy=0.375000, lr=0.000100\n","Iter=1408064/epoch=22, Loss=2.429699, Training Accuracy=0.359375, lr=0.000100\n","Iter=1413184/epoch=22, Loss=2.409451, Training Accuracy=0.265625, lr=0.000100\n","Iter=1418304/epoch=22, Loss=2.689750, Training Accuracy=0.234375, lr=0.000100\n","Iter=1423424/epoch=22, Loss=2.510249, Training Accuracy=0.328125, lr=0.000100\n","Iter=1428544/epoch=22, Loss=2.522354, Training Accuracy=0.265625, lr=0.000100\n","Iter=1433664/epoch=22, Loss=2.578902, Training Accuracy=0.296875, lr=0.000100\n","Iter=1438784/epoch=22, Loss=2.360658, Training Accuracy=0.375000, lr=0.000100\n","Iter=1443904/epoch=22, Loss=2.384180, Training Accuracy=0.375000, lr=0.000100\n","Iter=1449024/epoch=22, Loss=2.709262, Training Accuracy=0.296875, lr=0.000100\n","Iter=1454144/epoch=22, Loss=2.281917, Training Accuracy=0.390625, lr=0.000100\n","Iter=1459264/epoch=23, Loss=2.581142, Training Accuracy=0.234375, lr=0.000100\n","Iter=1464384/epoch=23, Loss=2.349473, Training Accuracy=0.328125, lr=0.000100\n","Iter=1469504/epoch=23, Loss=2.527671, Training Accuracy=0.296875, lr=0.000100\n","Iter=1474624/epoch=23, Loss=2.330034, Training Accuracy=0.375000, lr=0.000100\n","Iter=1479744/epoch=23, Loss=2.500961, Training Accuracy=0.343750, lr=0.000100\n","Iter=1484864/epoch=23, Loss=1.979623, Training Accuracy=0.359375, lr=0.000100\n","Iter=1489984/epoch=23, Loss=2.364351, Training Accuracy=0.390625, lr=0.000100\n","Iter=1495104/epoch=23, Loss=2.385324, Training Accuracy=0.343750, lr=0.000100\n","Iter=1500224/epoch=23, Loss=2.190648, Training Accuracy=0.406250, lr=0.000100\n","Iter=1505344/epoch=23, Loss=2.419256, Training Accuracy=0.296875, lr=0.000100\n","Iter=1510464/epoch=23, Loss=2.550440, Training Accuracy=0.312500, lr=0.000100\n","Iter=1515584/epoch=23, Loss=2.155137, Training Accuracy=0.437500, lr=0.000100\n","Iter=1520704/epoch=24, Loss=2.423021, Training Accuracy=0.359375, lr=0.000100\n","Iter=1525824/epoch=24, Loss=2.354269, Training Accuracy=0.390625, lr=0.000100\n","Iter=1530944/epoch=24, Loss=2.137535, Training Accuracy=0.359375, lr=0.000100\n","Iter=1536064/epoch=24, Loss=2.037666, Training Accuracy=0.421875, lr=0.000100\n","Iter=1541184/epoch=24, Loss=2.506481, Training Accuracy=0.250000, lr=0.000100\n","Iter=1546304/epoch=24, Loss=2.345756, Training Accuracy=0.343750, lr=0.000100\n","Iter=1551424/epoch=24, Loss=2.407777, Training Accuracy=0.328125, lr=0.000100\n","Iter=1556544/epoch=24, Loss=2.376582, Training Accuracy=0.296875, lr=0.000100\n","Iter=1561664/epoch=24, Loss=2.482399, Training Accuracy=0.218750, lr=0.000100\n","Iter=1566784/epoch=24, Loss=2.273167, Training Accuracy=0.421875, lr=0.000100\n","Iter=1571904/epoch=24, Loss=2.504269, Training Accuracy=0.375000, lr=0.000100\n","Iter=1577024/epoch=24, Loss=2.565277, Training Accuracy=0.250000, lr=0.000100\n","Iter=1582144/epoch=24, Loss=2.464482, Training Accuracy=0.296875, lr=0.000100\n","Iter=1587264/epoch=25, Loss=2.505018, Training Accuracy=0.312500, lr=0.000100\n","Iter=1592384/epoch=25, Loss=2.359447, Training Accuracy=0.296875, lr=0.000100\n","Iter=1597504/epoch=25, Loss=2.601029, Training Accuracy=0.343750, lr=0.000100\n","Iter=1602624/epoch=25, Loss=2.402535, Training Accuracy=0.312500, lr=0.000100\n","Iter=1607744/epoch=25, Loss=2.137483, Training Accuracy=0.406250, lr=0.000100\n","Iter=1612864/epoch=25, Loss=2.362654, Training Accuracy=0.312500, lr=0.000100\n","Iter=1617984/epoch=25, Loss=2.668638, Training Accuracy=0.250000, lr=0.000100\n","Iter=1623104/epoch=25, Loss=2.200173, Training Accuracy=0.390625, lr=0.000100\n","Iter=1628224/epoch=25, Loss=2.551817, Training Accuracy=0.265625, lr=0.000100\n","Iter=1633344/epoch=25, Loss=2.645942, Training Accuracy=0.296875, lr=0.000100\n","Iter=1638464/epoch=25, Loss=2.138265, Training Accuracy=0.296875, lr=0.000100\n","Iter=1643584/epoch=25, Loss=2.252682, Training Accuracy=0.390625, lr=0.000100\n","Iter=1648704/epoch=26, Loss=2.259275, Training Accuracy=0.359375, lr=0.000100\n","Iter=1653824/epoch=26, Loss=2.392269, Training Accuracy=0.343750, lr=0.000100\n","Iter=1658944/epoch=26, Loss=2.121671, Training Accuracy=0.406250, lr=0.000100\n","Iter=1664064/epoch=26, Loss=2.434588, Training Accuracy=0.296875, lr=0.000100\n","Iter=1669184/epoch=26, Loss=2.296788, Training Accuracy=0.406250, lr=0.000100\n","Iter=1674304/epoch=26, Loss=2.421810, Training Accuracy=0.281250, lr=0.000100\n","Iter=1679424/epoch=26, Loss=2.050911, Training Accuracy=0.484375, lr=0.000100\n","Iter=1684544/epoch=26, Loss=2.032268, Training Accuracy=0.468750, lr=0.000100\n","Iter=1689664/epoch=26, Loss=2.187203, Training Accuracy=0.375000, lr=0.000100\n","Iter=1694784/epoch=26, Loss=2.255381, Training Accuracy=0.421875, lr=0.000100\n","Iter=1699904/epoch=26, Loss=2.006445, Training Accuracy=0.437500, lr=0.000100\n","Iter=1705024/epoch=26, Loss=2.267546, Training Accuracy=0.281250, lr=0.000100\n","Iter=1710144/epoch=27, Loss=2.069042, Training Accuracy=0.359375, lr=0.000100\n","Iter=1715264/epoch=27, Loss=2.043716, Training Accuracy=0.375000, lr=0.000100\n","Iter=1720384/epoch=27, Loss=2.448916, Training Accuracy=0.328125, lr=0.000100\n","Iter=1725504/epoch=27, Loss=2.436657, Training Accuracy=0.421875, lr=0.000100\n","Iter=1730624/epoch=27, Loss=2.778193, Training Accuracy=0.187500, lr=0.000100\n","Iter=1735744/epoch=27, Loss=2.025299, Training Accuracy=0.484375, lr=0.000100\n","Iter=1740864/epoch=27, Loss=2.237308, Training Accuracy=0.359375, lr=0.000100\n","Iter=1745984/epoch=27, Loss=2.331374, Training Accuracy=0.328125, lr=0.000100\n","Iter=1751104/epoch=27, Loss=2.415998, Training Accuracy=0.328125, lr=0.000100\n","Iter=1756224/epoch=27, Loss=2.342864, Training Accuracy=0.328125, lr=0.000100\n","Iter=1761344/epoch=27, Loss=2.267102, Training Accuracy=0.375000, lr=0.000100\n","Iter=1766464/epoch=27, Loss=2.623597, Training Accuracy=0.203125, lr=0.000100\n","Iter=1771584/epoch=27, Loss=2.053365, Training Accuracy=0.453125, lr=0.000100\n","Iter=1776704/epoch=28, Loss=2.421557, Training Accuracy=0.390625, lr=0.000100\n","Iter=1781824/epoch=28, Loss=2.452301, Training Accuracy=0.343750, lr=0.000100\n","Iter=1786944/epoch=28, Loss=2.273877, Training Accuracy=0.390625, lr=0.000100\n","Iter=1792064/epoch=28, Loss=2.052794, Training Accuracy=0.421875, lr=0.000100\n","Iter=1797184/epoch=28, Loss=2.210306, Training Accuracy=0.375000, lr=0.000100\n","Iter=1802304/epoch=28, Loss=2.106730, Training Accuracy=0.343750, lr=0.000100\n","Iter=1807424/epoch=28, Loss=1.886147, Training Accuracy=0.515625, lr=0.000100\n","Iter=1812544/epoch=28, Loss=2.247468, Training Accuracy=0.359375, lr=0.000100\n","Iter=1817664/epoch=28, Loss=2.089992, Training Accuracy=0.406250, lr=0.000100\n","Iter=1822784/epoch=28, Loss=2.286374, Training Accuracy=0.375000, lr=0.000100\n","Iter=1827904/epoch=28, Loss=1.996797, Training Accuracy=0.390625, lr=0.000100\n","Iter=1833024/epoch=28, Loss=2.046225, Training Accuracy=0.453125, lr=0.000100\n","Iter=1838144/epoch=29, Loss=2.240473, Training Accuracy=0.359375, lr=0.000100\n","Iter=1843264/epoch=29, Loss=2.162690, Training Accuracy=0.437500, lr=0.000100\n","Iter=1848384/epoch=29, Loss=2.271262, Training Accuracy=0.296875, lr=0.000100\n","Iter=1853504/epoch=29, Loss=2.145669, Training Accuracy=0.375000, lr=0.000100\n","Iter=1858624/epoch=29, Loss=1.979156, Training Accuracy=0.421875, lr=0.000100\n","Iter=1863744/epoch=29, Loss=2.300286, Training Accuracy=0.421875, lr=0.000100\n","Iter=1868864/epoch=29, Loss=2.400881, Training Accuracy=0.328125, lr=0.000100\n","Iter=1873984/epoch=29, Loss=2.140671, Training Accuracy=0.421875, lr=0.000100\n","Iter=1879104/epoch=29, Loss=2.185539, Training Accuracy=0.390625, lr=0.000100\n","Iter=1884224/epoch=29, Loss=2.042967, Training Accuracy=0.437500, lr=0.000100\n","Iter=1889344/epoch=29, Loss=2.162610, Training Accuracy=0.484375, lr=0.000100\n","Iter=1894464/epoch=29, Loss=2.036790, Training Accuracy=0.437500, lr=0.000100\n","Iter=1899584/epoch=29, Loss=2.374291, Training Accuracy=0.343750, lr=0.000100\n","Iter=1904704/epoch=30, Loss=2.334781, Training Accuracy=0.375000, lr=0.000100\n","Iter=1909824/epoch=30, Loss=2.433743, Training Accuracy=0.359375, lr=0.000100\n","Iter=1914944/epoch=30, Loss=2.228259, Training Accuracy=0.296875, lr=0.000100\n","Model saved in file at iteration 1920064: tf_resnet_model_iter30001.ckpt\n","Iter=1920064/epoch=30, Loss=2.042318, Training Accuracy=0.468750, lr=0.000100\n","Iter=1925184/epoch=30, Loss=2.313044, Training Accuracy=0.296875, lr=0.000100\n","Iter=1930304/epoch=30, Loss=2.533936, Training Accuracy=0.343750, lr=0.000100\n","Iter=1935424/epoch=30, Loss=2.050540, Training Accuracy=0.390625, lr=0.000100\n","Iter=1940544/epoch=30, Loss=2.569034, Training Accuracy=0.265625, lr=0.000100\n","Iter=1945664/epoch=30, Loss=1.966448, Training Accuracy=0.359375, lr=0.000100\n","Iter=1950784/epoch=30, Loss=2.271959, Training Accuracy=0.343750, lr=0.000100\n","Iter=1955904/epoch=30, Loss=2.311319, Training Accuracy=0.343750, lr=0.000100\n","Iter=1961024/epoch=30, Loss=2.425485, Training Accuracy=0.328125, lr=0.000100\n","Iter=1966144/epoch=31, Loss=2.342842, Training Accuracy=0.312500, lr=0.000100\n","Iter=1971264/epoch=31, Loss=2.365138, Training Accuracy=0.218750, lr=0.000100\n","Iter=1976384/epoch=31, Loss=2.220035, Training Accuracy=0.390625, lr=0.000100\n","Iter=1981504/epoch=31, Loss=2.185471, Training Accuracy=0.453125, lr=0.000100\n","Iter=1986624/epoch=31, Loss=2.123206, Training Accuracy=0.375000, lr=0.000100\n","Iter=1991744/epoch=31, Loss=2.524495, Training Accuracy=0.265625, lr=0.000100\n","Iter=1996864/epoch=31, Loss=2.262179, Training Accuracy=0.328125, lr=0.000100\n","Iter=2001984/epoch=31, Loss=2.261076, Training Accuracy=0.343750, lr=0.000100\n","Iter=2007104/epoch=31, Loss=2.043302, Training Accuracy=0.484375, lr=0.000100\n","Iter=2012224/epoch=31, Loss=1.931086, Training Accuracy=0.453125, lr=0.000100\n","Iter=2017344/epoch=31, Loss=1.930616, Training Accuracy=0.546875, lr=0.000100\n","Iter=2022464/epoch=31, Loss=2.037210, Training Accuracy=0.468750, lr=0.000100\n","Iter=2027584/epoch=32, Loss=2.319183, Training Accuracy=0.375000, lr=0.000100\n","Iter=2032704/epoch=32, Loss=2.487206, Training Accuracy=0.265625, lr=0.000100\n","Iter=2037824/epoch=32, Loss=2.313581, Training Accuracy=0.343750, lr=0.000100\n","Iter=2042944/epoch=32, Loss=2.087998, Training Accuracy=0.390625, lr=0.000100\n","Iter=2048064/epoch=32, Loss=2.230228, Training Accuracy=0.390625, lr=0.000100\n","Iter=2053184/epoch=32, Loss=2.085921, Training Accuracy=0.390625, lr=0.000100\n","Iter=2058304/epoch=32, Loss=2.239531, Training Accuracy=0.390625, lr=0.000100\n","Iter=2063424/epoch=32, Loss=2.321883, Training Accuracy=0.359375, lr=0.000100\n","Iter=2068544/epoch=32, Loss=1.989645, Training Accuracy=0.437500, lr=0.000100\n","Iter=2073664/epoch=32, Loss=2.490886, Training Accuracy=0.328125, lr=0.000100\n","Iter=2078784/epoch=32, Loss=2.152336, Training Accuracy=0.421875, lr=0.000100\n","Iter=2083904/epoch=32, Loss=2.684305, Training Accuracy=0.265625, lr=0.000100\n","Iter=2089024/epoch=32, Loss=2.347820, Training Accuracy=0.375000, lr=0.000100\n","Iter=2094144/epoch=33, Loss=2.108507, Training Accuracy=0.453125, lr=0.000100\n","Iter=2099264/epoch=33, Loss=2.291156, Training Accuracy=0.406250, lr=0.000100\n","Iter=2104384/epoch=33, Loss=2.109015, Training Accuracy=0.515625, lr=0.000100\n","Iter=2109504/epoch=33, Loss=2.345344, Training Accuracy=0.406250, lr=0.000100\n","Iter=2114624/epoch=33, Loss=2.140679, Training Accuracy=0.312500, lr=0.000100\n","Iter=2119744/epoch=33, Loss=2.329003, Training Accuracy=0.359375, lr=0.000100\n","Iter=2124864/epoch=33, Loss=2.045835, Training Accuracy=0.484375, lr=0.000100\n","Iter=2129984/epoch=33, Loss=2.078290, Training Accuracy=0.437500, lr=0.000100\n","Iter=2135104/epoch=33, Loss=2.337211, Training Accuracy=0.312500, lr=0.000100\n","Iter=2140224/epoch=33, Loss=1.905479, Training Accuracy=0.359375, lr=0.000100\n","Iter=2145344/epoch=33, Loss=2.176034, Training Accuracy=0.281250, lr=0.000100\n","Iter=2150464/epoch=33, Loss=1.658138, Training Accuracy=0.546875, lr=0.000100\n","Iter=2155584/epoch=34, Loss=2.177124, Training Accuracy=0.390625, lr=0.000100\n","Iter=2160704/epoch=34, Loss=2.607542, Training Accuracy=0.171875, lr=0.000100\n","Iter=2165824/epoch=34, Loss=1.876330, Training Accuracy=0.437500, lr=0.000100\n","Iter=2170944/epoch=34, Loss=1.831239, Training Accuracy=0.484375, lr=0.000100\n","Iter=2176064/epoch=34, Loss=2.110754, Training Accuracy=0.406250, lr=0.000100\n","Iter=2181184/epoch=34, Loss=2.030673, Training Accuracy=0.437500, lr=0.000100\n","Iter=2186304/epoch=34, Loss=2.572248, Training Accuracy=0.234375, lr=0.000100\n","Iter=2191424/epoch=34, Loss=2.271104, Training Accuracy=0.281250, lr=0.000100\n","Iter=2196544/epoch=34, Loss=1.952140, Training Accuracy=0.437500, lr=0.000100\n","Iter=2201664/epoch=34, Loss=2.094288, Training Accuracy=0.437500, lr=0.000100\n","Iter=2206784/epoch=34, Loss=2.012040, Training Accuracy=0.406250, lr=0.000100\n","Iter=2211904/epoch=34, Loss=1.874486, Training Accuracy=0.421875, lr=0.000100\n","Iter=2217024/epoch=35, Loss=2.168030, Training Accuracy=0.421875, lr=0.000100\n","Iter=2222144/epoch=35, Loss=1.935182, Training Accuracy=0.484375, lr=0.000100\n","Iter=2227264/epoch=35, Loss=2.144414, Training Accuracy=0.437500, lr=0.000100\n","Iter=2232384/epoch=35, Loss=2.046011, Training Accuracy=0.421875, lr=0.000100\n","Iter=2237504/epoch=35, Loss=2.254661, Training Accuracy=0.375000, lr=0.000100\n","Iter=2242624/epoch=35, Loss=2.088427, Training Accuracy=0.468750, lr=0.000100\n","Iter=2247744/epoch=35, Loss=2.272788, Training Accuracy=0.328125, lr=0.000100\n","Iter=2252864/epoch=35, Loss=2.414751, Training Accuracy=0.375000, lr=0.000100\n","Iter=2257984/epoch=35, Loss=2.131500, Training Accuracy=0.312500, lr=0.000100\n","Iter=2263104/epoch=35, Loss=2.140495, Training Accuracy=0.375000, lr=0.000100\n","Iter=2268224/epoch=35, Loss=1.750355, Training Accuracy=0.484375, lr=0.000100\n","Iter=2273344/epoch=35, Loss=2.286731, Training Accuracy=0.375000, lr=0.000100\n","Iter=2278464/epoch=35, Loss=2.199344, Training Accuracy=0.390625, lr=0.000100\n","Iter=2283584/epoch=36, Loss=2.720259, Training Accuracy=0.343750, lr=0.000100\n","Iter=2288704/epoch=36, Loss=2.366166, Training Accuracy=0.328125, lr=0.000100\n","Iter=2293824/epoch=36, Loss=2.137058, Training Accuracy=0.390625, lr=0.000100\n","Iter=2298944/epoch=36, Loss=1.819144, Training Accuracy=0.453125, lr=0.000100\n","Iter=2304064/epoch=36, Loss=2.082509, Training Accuracy=0.343750, lr=0.000100\n","Iter=2309184/epoch=36, Loss=2.309515, Training Accuracy=0.312500, lr=0.000100\n","Iter=2314304/epoch=36, Loss=2.538418, Training Accuracy=0.296875, lr=0.000100\n","Iter=2319424/epoch=36, Loss=2.253409, Training Accuracy=0.328125, lr=0.000100\n","Iter=2324544/epoch=36, Loss=1.944290, Training Accuracy=0.421875, lr=0.000100\n","Iter=2329664/epoch=36, Loss=2.459152, Training Accuracy=0.406250, lr=0.000100\n","Iter=2334784/epoch=36, Loss=2.043918, Training Accuracy=0.390625, lr=0.000100\n","Iter=2339904/epoch=36, Loss=2.282211, Training Accuracy=0.359375, lr=0.000100\n","Iter=2345024/epoch=37, Loss=2.192992, Training Accuracy=0.421875, lr=0.000100\n","Iter=2350144/epoch=37, Loss=2.006429, Training Accuracy=0.437500, lr=0.000100\n","Iter=2355264/epoch=37, Loss=2.581847, Training Accuracy=0.359375, lr=0.000100\n","Iter=2360384/epoch=37, Loss=1.970975, Training Accuracy=0.390625, lr=0.000100\n","Iter=2365504/epoch=37, Loss=1.994944, Training Accuracy=0.484375, lr=0.000100\n","Iter=2370624/epoch=37, Loss=1.921026, Training Accuracy=0.484375, lr=0.000100\n","Iter=2375744/epoch=37, Loss=2.260056, Training Accuracy=0.375000, lr=0.000100\n","Iter=2380864/epoch=37, Loss=2.170740, Training Accuracy=0.390625, lr=0.000100\n","Iter=2385984/epoch=37, Loss=2.541279, Training Accuracy=0.296875, lr=0.000100\n","Iter=2391104/epoch=37, Loss=2.223663, Training Accuracy=0.406250, lr=0.000100\n","Iter=2396224/epoch=37, Loss=1.931325, Training Accuracy=0.453125, lr=0.000100\n","Iter=2401344/epoch=37, Loss=2.163557, Training Accuracy=0.343750, lr=0.000100\n","Iter=2406464/epoch=38, Loss=2.349023, Training Accuracy=0.312500, lr=0.000100\n","Iter=2411584/epoch=38, Loss=2.053620, Training Accuracy=0.359375, lr=0.000100\n","Iter=2416704/epoch=38, Loss=2.261059, Training Accuracy=0.375000, lr=0.000100\n","Iter=2421824/epoch=38, Loss=2.324415, Training Accuracy=0.265625, lr=0.000100\n","Iter=2426944/epoch=38, Loss=2.077647, Training Accuracy=0.437500, lr=0.000100\n","Iter=2432064/epoch=38, Loss=2.337193, Training Accuracy=0.406250, lr=0.000100\n","Iter=2437184/epoch=38, Loss=1.977403, Training Accuracy=0.437500, lr=0.000100\n","Iter=2442304/epoch=38, Loss=2.157293, Training Accuracy=0.421875, lr=0.000100\n","Iter=2447424/epoch=38, Loss=2.109864, Training Accuracy=0.468750, lr=0.000100\n","Iter=2452544/epoch=38, Loss=2.164874, Training Accuracy=0.359375, lr=0.000100\n","Iter=2457664/epoch=38, Loss=2.229675, Training Accuracy=0.421875, lr=0.000100\n","Iter=2462784/epoch=38, Loss=2.432173, Training Accuracy=0.328125, lr=0.000100\n","Iter=2467904/epoch=38, Loss=2.087355, Training Accuracy=0.468750, lr=0.000100\n","Iter=2473024/epoch=39, Loss=2.319353, Training Accuracy=0.312500, lr=0.000100\n","Iter=2478144/epoch=39, Loss=2.066577, Training Accuracy=0.406250, lr=0.000100\n","Iter=2483264/epoch=39, Loss=1.985903, Training Accuracy=0.375000, lr=0.000100\n","Iter=2488384/epoch=39, Loss=2.032042, Training Accuracy=0.468750, lr=0.000100\n","Iter=2493504/epoch=39, Loss=1.960049, Training Accuracy=0.515625, lr=0.000100\n","Iter=2498624/epoch=39, Loss=2.414463, Training Accuracy=0.359375, lr=0.000100\n","Iter=2503744/epoch=39, Loss=1.908413, Training Accuracy=0.375000, lr=0.000100\n","Iter=2508864/epoch=39, Loss=2.316282, Training Accuracy=0.281250, lr=0.000100\n","Iter=2513984/epoch=39, Loss=2.255767, Training Accuracy=0.343750, lr=0.000100\n","Iter=2519104/epoch=39, Loss=2.268146, Training Accuracy=0.343750, lr=0.000100\n","Iter=2524224/epoch=39, Loss=2.170547, Training Accuracy=0.406250, lr=0.000100\n","Iter=2529344/epoch=39, Loss=2.058727, Training Accuracy=0.375000, lr=0.000100\n","Iter=2534464/epoch=40, Loss=2.318646, Training Accuracy=0.328125, lr=0.000100\n","Iter=2539584/epoch=40, Loss=2.138945, Training Accuracy=0.375000, lr=0.000100\n","Iter=2544704/epoch=40, Loss=2.433031, Training Accuracy=0.390625, lr=0.000100\n","Iter=2549824/epoch=40, Loss=2.134716, Training Accuracy=0.375000, lr=0.000100\n","Iter=2554944/epoch=40, Loss=2.161484, Training Accuracy=0.359375, lr=0.000100\n","Iter=2560064/epoch=40, Loss=2.506717, Training Accuracy=0.281250, lr=0.000100\n","Iter=2565184/epoch=40, Loss=2.288057, Training Accuracy=0.328125, lr=0.000100\n","Iter=2570304/epoch=40, Loss=1.990430, Training Accuracy=0.453125, lr=0.000100\n","Iter=2575424/epoch=40, Loss=2.551115, Training Accuracy=0.296875, lr=0.000100\n","Iter=2580544/epoch=40, Loss=2.249549, Training Accuracy=0.328125, lr=0.000100\n","Iter=2585664/epoch=40, Loss=1.961069, Training Accuracy=0.500000, lr=0.000100\n","Iter=2590784/epoch=40, Loss=2.071137, Training Accuracy=0.421875, lr=0.000100\n","Iter=2595904/epoch=40, Loss=2.135365, Training Accuracy=0.406250, lr=0.000100\n","Iter=2601024/epoch=41, Loss=2.188288, Training Accuracy=0.375000, lr=0.000100\n","Iter=2606144/epoch=41, Loss=2.112145, Training Accuracy=0.390625, lr=0.000100\n","Iter=2611264/epoch=41, Loss=2.407236, Training Accuracy=0.234375, lr=0.000100\n","Iter=2616384/epoch=41, Loss=1.675770, Training Accuracy=0.421875, lr=0.000100\n","Iter=2621504/epoch=41, Loss=2.198328, Training Accuracy=0.312500, lr=0.000100\n","Iter=2626624/epoch=41, Loss=2.333687, Training Accuracy=0.375000, lr=0.000100\n","Iter=2631744/epoch=41, Loss=2.190991, Training Accuracy=0.312500, lr=0.000100\n","Iter=2636864/epoch=41, Loss=2.176754, Training Accuracy=0.390625, lr=0.000100\n","Iter=2641984/epoch=41, Loss=2.071411, Training Accuracy=0.390625, lr=0.000100\n","Iter=2647104/epoch=41, Loss=2.322240, Training Accuracy=0.453125, lr=0.000100\n","Iter=2652224/epoch=41, Loss=1.968619, Training Accuracy=0.390625, lr=0.000100\n","Iter=2657344/epoch=41, Loss=1.850377, Training Accuracy=0.421875, lr=0.000100\n","Iter=2662464/epoch=42, Loss=2.122236, Training Accuracy=0.375000, lr=0.000100\n","Iter=2667584/epoch=42, Loss=2.055652, Training Accuracy=0.343750, lr=0.000100\n","Iter=2672704/epoch=42, Loss=2.229501, Training Accuracy=0.390625, lr=0.000100\n","Iter=2677824/epoch=42, Loss=2.108352, Training Accuracy=0.375000, lr=0.000100\n","Iter=2682944/epoch=42, Loss=2.106781, Training Accuracy=0.375000, lr=0.000100\n","Iter=2688064/epoch=42, Loss=2.112393, Training Accuracy=0.390625, lr=0.000100\n","Iter=2693184/epoch=42, Loss=1.875479, Training Accuracy=0.375000, lr=0.000100\n","Iter=2698304/epoch=42, Loss=1.853989, Training Accuracy=0.453125, lr=0.000100\n","Iter=2703424/epoch=42, Loss=2.164233, Training Accuracy=0.453125, lr=0.000100\n","Iter=2708544/epoch=42, Loss=2.426251, Training Accuracy=0.265625, lr=0.000100\n","Iter=2713664/epoch=42, Loss=2.070249, Training Accuracy=0.453125, lr=0.000100\n","Iter=2718784/epoch=42, Loss=1.916040, Training Accuracy=0.406250, lr=0.000100\n","Iter=2723904/epoch=43, Loss=2.179161, Training Accuracy=0.359375, lr=0.000100\n","Iter=2729024/epoch=43, Loss=2.488314, Training Accuracy=0.359375, lr=0.000100\n","Iter=2734144/epoch=43, Loss=2.230276, Training Accuracy=0.375000, lr=0.000100\n","Iter=2739264/epoch=43, Loss=1.788980, Training Accuracy=0.500000, lr=0.000100\n","Iter=2744384/epoch=43, Loss=1.863647, Training Accuracy=0.531250, lr=0.000100\n","Iter=2749504/epoch=43, Loss=2.152402, Training Accuracy=0.390625, lr=0.000100\n","Iter=2754624/epoch=43, Loss=2.063178, Training Accuracy=0.437500, lr=0.000100\n","Iter=2759744/epoch=43, Loss=1.933652, Training Accuracy=0.515625, lr=0.000100\n","Iter=2764864/epoch=43, Loss=2.422996, Training Accuracy=0.312500, lr=0.000100\n","Iter=2769984/epoch=43, Loss=1.979051, Training Accuracy=0.375000, lr=0.000100\n","Iter=2775104/epoch=43, Loss=2.223418, Training Accuracy=0.296875, lr=0.000100\n","Iter=2780224/epoch=43, Loss=2.119428, Training Accuracy=0.375000, lr=0.000100\n","Iter=2785344/epoch=43, Loss=1.923977, Training Accuracy=0.468750, lr=0.000100\n","Iter=2790464/epoch=44, Loss=2.138740, Training Accuracy=0.359375, lr=0.000100\n","Iter=2795584/epoch=44, Loss=2.328317, Training Accuracy=0.375000, lr=0.000100\n","Iter=2800704/epoch=44, Loss=2.023791, Training Accuracy=0.375000, lr=0.000100\n","Iter=2805824/epoch=44, Loss=1.864791, Training Accuracy=0.453125, lr=0.000100\n","Iter=2810944/epoch=44, Loss=2.356214, Training Accuracy=0.296875, lr=0.000100\n","Iter=2816064/epoch=44, Loss=2.189187, Training Accuracy=0.390625, lr=0.000100\n","Iter=2821184/epoch=44, Loss=2.104568, Training Accuracy=0.437500, lr=0.000100\n","Iter=2826304/epoch=44, Loss=2.037489, Training Accuracy=0.468750, lr=0.000100\n","Iter=2831424/epoch=44, Loss=2.320333, Training Accuracy=0.281250, lr=0.000100\n","Iter=2836544/epoch=44, Loss=2.073804, Training Accuracy=0.468750, lr=0.000100\n","Iter=2841664/epoch=44, Loss=2.256853, Training Accuracy=0.359375, lr=0.000100\n","Iter=2846784/epoch=44, Loss=1.963931, Training Accuracy=0.359375, lr=0.000100\n","Iter=2851904/epoch=45, Loss=1.966403, Training Accuracy=0.390625, lr=0.000100\n","Iter=2857024/epoch=45, Loss=1.973572, Training Accuracy=0.437500, lr=0.000100\n","Iter=2862144/epoch=45, Loss=1.852157, Training Accuracy=0.484375, lr=0.000100\n","Iter=2867264/epoch=45, Loss=2.363549, Training Accuracy=0.375000, lr=0.000100\n","Iter=2872384/epoch=45, Loss=1.909846, Training Accuracy=0.421875, lr=0.000100\n","Iter=2877504/epoch=45, Loss=2.177556, Training Accuracy=0.390625, lr=0.000100\n","Model saved in file at iteration 2880064: tf_resnet_model_iter45001.ckpt\n","Iter=2882624/epoch=45, Loss=2.168965, Training Accuracy=0.390625, lr=0.000100\n","Iter=2887744/epoch=45, Loss=1.980592, Training Accuracy=0.437500, lr=0.000100\n","Iter=2892864/epoch=45, Loss=2.222594, Training Accuracy=0.375000, lr=0.000100\n","Iter=2897984/epoch=45, Loss=1.869625, Training Accuracy=0.484375, lr=0.000100\n","Iter=2903104/epoch=45, Loss=2.015221, Training Accuracy=0.406250, lr=0.000100\n","Iter=2908224/epoch=45, Loss=1.949230, Training Accuracy=0.406250, lr=0.000100\n","Iter=2913344/epoch=46, Loss=2.138427, Training Accuracy=0.390625, lr=0.000100\n","Iter=2918464/epoch=46, Loss=2.115812, Training Accuracy=0.375000, lr=0.000100\n","Iter=2923584/epoch=46, Loss=2.158547, Training Accuracy=0.390625, lr=0.000100\n","Iter=2928704/epoch=46, Loss=2.306935, Training Accuracy=0.406250, lr=0.000100\n","Iter=2933824/epoch=46, Loss=2.268571, Training Accuracy=0.406250, lr=0.000100\n","Iter=2938944/epoch=46, Loss=2.623855, Training Accuracy=0.312500, lr=0.000100\n","Iter=2944064/epoch=46, Loss=2.142227, Training Accuracy=0.437500, lr=0.000100\n","Iter=2949184/epoch=46, Loss=1.651295, Training Accuracy=0.453125, lr=0.000100\n","Iter=2954304/epoch=46, Loss=2.358747, Training Accuracy=0.359375, lr=0.000100\n","Iter=2959424/epoch=46, Loss=1.989042, Training Accuracy=0.375000, lr=0.000100\n","Iter=2964544/epoch=46, Loss=1.964286, Training Accuracy=0.343750, lr=0.000100\n","Iter=2969664/epoch=46, Loss=1.909105, Training Accuracy=0.468750, lr=0.000100\n","Iter=2974784/epoch=46, Loss=2.175735, Training Accuracy=0.390625, lr=0.000100\n","Iter=2979904/epoch=47, Loss=2.254317, Training Accuracy=0.375000, lr=0.000100\n","Iter=2985024/epoch=47, Loss=2.124539, Training Accuracy=0.406250, lr=0.000100\n","Iter=2990144/epoch=47, Loss=2.455134, Training Accuracy=0.312500, lr=0.000100\n","Iter=2995264/epoch=47, Loss=1.897103, Training Accuracy=0.484375, lr=0.000100\n","Iter=3000384/epoch=47, Loss=2.262052, Training Accuracy=0.359375, lr=0.000100\n","Iter=3005504/epoch=47, Loss=2.094439, Training Accuracy=0.437500, lr=0.000100\n","Iter=3010624/epoch=47, Loss=2.242970, Training Accuracy=0.359375, lr=0.000100\n","Iter=3015744/epoch=47, Loss=2.410691, Training Accuracy=0.312500, lr=0.000100\n","Iter=3020864/epoch=47, Loss=2.184555, Training Accuracy=0.468750, lr=0.000100\n","Iter=3025984/epoch=47, Loss=2.125243, Training Accuracy=0.406250, lr=0.000100\n","Iter=3031104/epoch=47, Loss=2.501757, Training Accuracy=0.296875, lr=0.000100\n","Iter=3036224/epoch=47, Loss=1.956882, Training Accuracy=0.375000, lr=0.000100\n","Iter=3041344/epoch=48, Loss=2.426979, Training Accuracy=0.343750, lr=0.000100\n","Iter=3046464/epoch=48, Loss=2.175317, Training Accuracy=0.421875, lr=0.000100\n","Iter=3051584/epoch=48, Loss=1.993874, Training Accuracy=0.406250, lr=0.000100\n","Iter=3056704/epoch=48, Loss=1.928310, Training Accuracy=0.453125, lr=0.000100\n","Iter=3061824/epoch=48, Loss=2.097769, Training Accuracy=0.421875, lr=0.000100\n","Iter=3066944/epoch=48, Loss=2.218789, Training Accuracy=0.406250, lr=0.000100\n","Iter=3072064/epoch=48, Loss=1.757897, Training Accuracy=0.515625, lr=0.000100\n","Iter=3077184/epoch=48, Loss=2.146504, Training Accuracy=0.343750, lr=0.000100\n","Iter=3082304/epoch=48, Loss=2.028691, Training Accuracy=0.468750, lr=0.000100\n","Iter=3087424/epoch=48, Loss=1.978519, Training Accuracy=0.437500, lr=0.000100\n","Iter=3092544/epoch=48, Loss=2.101822, Training Accuracy=0.359375, lr=0.000100\n","Iter=3097664/epoch=48, Loss=1.957654, Training Accuracy=0.437500, lr=0.000100\n","Iter=3102784/epoch=48, Loss=2.259046, Training Accuracy=0.390625, lr=0.000100\n","Iter=3107904/epoch=49, Loss=1.996626, Training Accuracy=0.406250, lr=0.000100\n","Iter=3113024/epoch=49, Loss=2.321547, Training Accuracy=0.343750, lr=0.000100\n","Iter=3118144/epoch=49, Loss=2.119791, Training Accuracy=0.406250, lr=0.000100\n","Iter=3123264/epoch=49, Loss=2.424187, Training Accuracy=0.312500, lr=0.000100\n","Iter=3128384/epoch=49, Loss=2.098986, Training Accuracy=0.453125, lr=0.000100\n","Iter=3133504/epoch=49, Loss=2.008781, Training Accuracy=0.484375, lr=0.000100\n","Iter=3138624/epoch=49, Loss=1.734174, Training Accuracy=0.531250, lr=0.000100\n","Iter=3143744/epoch=49, Loss=2.520126, Training Accuracy=0.328125, lr=0.000100\n","Iter=3148864/epoch=49, Loss=2.173017, Training Accuracy=0.406250, lr=0.000100\n","Iter=3153984/epoch=49, Loss=1.964837, Training Accuracy=0.484375, lr=0.000100\n","Iter=3159104/epoch=49, Loss=1.927996, Training Accuracy=0.437500, lr=0.000100\n","Iter=3164224/epoch=49, Loss=1.796344, Training Accuracy=0.437500, lr=0.000100\n","Iter=3169344/epoch=50, Loss=2.174599, Training Accuracy=0.375000, lr=0.000100\n","Iter=3174464/epoch=50, Loss=2.379176, Training Accuracy=0.265625, lr=0.000100\n","Iter=3179584/epoch=50, Loss=1.832493, Training Accuracy=0.453125, lr=0.000100\n","Iter=3184704/epoch=50, Loss=2.253911, Training Accuracy=0.375000, lr=0.000100\n","Iter=3189824/epoch=50, Loss=1.936031, Training Accuracy=0.515625, lr=0.000100\n","Iter=3194944/epoch=50, Loss=1.971813, Training Accuracy=0.437500, lr=0.000100\n","Iter=3200064/epoch=50, Loss=1.978007, Training Accuracy=0.375000, lr=0.000100\n","Iter=3205184/epoch=50, Loss=1.973169, Training Accuracy=0.390625, lr=0.000100\n","Iter=3210304/epoch=50, Loss=1.987342, Training Accuracy=0.390625, lr=0.000100\n","Iter=3215424/epoch=50, Loss=1.810997, Training Accuracy=0.500000, lr=0.000100\n","Iter=3220544/epoch=50, Loss=2.101204, Training Accuracy=0.390625, lr=0.000100\n","Iter=3225664/epoch=50, Loss=2.414180, Training Accuracy=0.328125, lr=0.000100\n","Iter=3230784/epoch=51, Loss=1.941909, Training Accuracy=0.437500, lr=0.000100\n","Iter=3235904/epoch=51, Loss=1.862300, Training Accuracy=0.453125, lr=0.000100\n","Iter=3241024/epoch=51, Loss=1.914541, Training Accuracy=0.421875, lr=0.000100\n","Iter=3246144/epoch=51, Loss=1.792977, Training Accuracy=0.468750, lr=0.000100\n","Iter=3251264/epoch=51, Loss=1.845632, Training Accuracy=0.406250, lr=0.000100\n","Iter=3256384/epoch=51, Loss=2.094930, Training Accuracy=0.453125, lr=0.000100\n","Iter=3261504/epoch=51, Loss=2.045848, Training Accuracy=0.515625, lr=0.000100\n","Iter=3266624/epoch=51, Loss=2.059107, Training Accuracy=0.437500, lr=0.000100\n","Iter=3271744/epoch=51, Loss=2.544702, Training Accuracy=0.328125, lr=0.000100\n","Iter=3276864/epoch=51, Loss=1.946529, Training Accuracy=0.500000, lr=0.000100\n","Iter=3281984/epoch=51, Loss=2.039719, Training Accuracy=0.359375, lr=0.000100\n","Iter=3287104/epoch=51, Loss=2.031885, Training Accuracy=0.546875, lr=0.000100\n","Iter=3292224/epoch=51, Loss=2.197790, Training Accuracy=0.343750, lr=0.000100\n","Iter=3297344/epoch=52, Loss=2.068268, Training Accuracy=0.421875, lr=0.000100\n","Iter=3302464/epoch=52, Loss=2.260195, Training Accuracy=0.437500, lr=0.000100\n","Iter=3307584/epoch=52, Loss=1.851626, Training Accuracy=0.484375, lr=0.000100\n","Iter=3312704/epoch=52, Loss=1.693714, Training Accuracy=0.484375, lr=0.000100\n","Iter=3317824/epoch=52, Loss=2.100506, Training Accuracy=0.390625, lr=0.000100\n","Iter=3322944/epoch=52, Loss=2.004099, Training Accuracy=0.406250, lr=0.000100\n","Iter=3328064/epoch=52, Loss=1.928503, Training Accuracy=0.421875, lr=0.000100\n","Iter=3333184/epoch=52, Loss=2.233333, Training Accuracy=0.406250, lr=0.000100\n","Iter=3338304/epoch=52, Loss=1.936660, Training Accuracy=0.375000, lr=0.000100\n","Iter=3343424/epoch=52, Loss=1.701660, Training Accuracy=0.515625, lr=0.000100\n","Iter=3348544/epoch=52, Loss=2.139600, Training Accuracy=0.406250, lr=0.000100\n","Iter=3353664/epoch=52, Loss=2.296229, Training Accuracy=0.281250, lr=0.000100\n","Iter=3358784/epoch=53, Loss=2.167331, Training Accuracy=0.359375, lr=0.000100\n","Iter=3363904/epoch=53, Loss=2.005897, Training Accuracy=0.406250, lr=0.000100\n","Iter=3369024/epoch=53, Loss=2.059822, Training Accuracy=0.375000, lr=0.000100\n","Iter=3374144/epoch=53, Loss=2.097935, Training Accuracy=0.328125, lr=0.000100\n","Iter=3379264/epoch=53, Loss=2.218782, Training Accuracy=0.468750, lr=0.000100\n","Iter=3384384/epoch=53, Loss=2.140377, Training Accuracy=0.390625, lr=0.000100\n","Iter=3389504/epoch=53, Loss=1.919832, Training Accuracy=0.406250, lr=0.000100\n","Iter=3394624/epoch=53, Loss=1.811018, Training Accuracy=0.500000, lr=0.000100\n","Iter=3399744/epoch=53, Loss=1.985896, Training Accuracy=0.406250, lr=0.000100\n","Iter=3404864/epoch=53, Loss=1.993882, Training Accuracy=0.406250, lr=0.000100\n","Iter=3409984/epoch=53, Loss=1.749472, Training Accuracy=0.562500, lr=0.000100\n","Iter=3415104/epoch=53, Loss=2.156257, Training Accuracy=0.359375, lr=0.000100\n","Iter=3420224/epoch=54, Loss=1.947453, Training Accuracy=0.453125, lr=0.000100\n","Iter=3425344/epoch=54, Loss=2.100425, Training Accuracy=0.437500, lr=0.000100\n","Iter=3430464/epoch=54, Loss=2.142430, Training Accuracy=0.406250, lr=0.000100\n","Iter=3435584/epoch=54, Loss=1.724080, Training Accuracy=0.500000, lr=0.000100\n","Iter=3440704/epoch=54, Loss=1.978939, Training Accuracy=0.390625, lr=0.000100\n","Iter=3445824/epoch=54, Loss=1.920564, Training Accuracy=0.453125, lr=0.000100\n","Iter=3450944/epoch=54, Loss=1.802462, Training Accuracy=0.421875, lr=0.000100\n","Iter=3456064/epoch=54, Loss=1.974862, Training Accuracy=0.437500, lr=0.000100\n","Iter=3461184/epoch=54, Loss=2.042453, Training Accuracy=0.421875, lr=0.000100\n","Iter=3466304/epoch=54, Loss=2.291798, Training Accuracy=0.375000, lr=0.000100\n","Iter=3471424/epoch=54, Loss=2.080595, Training Accuracy=0.343750, lr=0.000100\n","Iter=3476544/epoch=54, Loss=2.124927, Training Accuracy=0.437500, lr=0.000100\n","Iter=3481664/epoch=54, Loss=2.269437, Training Accuracy=0.375000, lr=0.000100\n","Iter=3486784/epoch=55, Loss=1.915928, Training Accuracy=0.390625, lr=0.000100\n","Iter=3491904/epoch=55, Loss=2.035782, Training Accuracy=0.453125, lr=0.000100\n","Iter=3497024/epoch=55, Loss=1.918363, Training Accuracy=0.437500, lr=0.000100\n","Iter=3502144/epoch=55, Loss=2.023955, Training Accuracy=0.437500, lr=0.000100\n","Iter=3507264/epoch=55, Loss=2.013963, Training Accuracy=0.406250, lr=0.000100\n","Iter=3512384/epoch=55, Loss=1.933342, Training Accuracy=0.484375, lr=0.000100\n","Iter=3517504/epoch=55, Loss=2.092934, Training Accuracy=0.359375, lr=0.000100\n","Iter=3522624/epoch=55, Loss=2.263328, Training Accuracy=0.390625, lr=0.000100\n","Iter=3527744/epoch=55, Loss=2.295043, Training Accuracy=0.359375, lr=0.000100\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab_type":"code","id":"AOQOeejKzh0f","colab":{}},"source":["exit()"],"execution_count":0,"outputs":[]}]}
